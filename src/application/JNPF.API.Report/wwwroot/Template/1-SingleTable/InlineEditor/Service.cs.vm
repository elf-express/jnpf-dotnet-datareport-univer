using JNPF.Common.Core.Manager;
using JNPF.Engine.Entity.Model;
@if(Model.IsExport)
{
@:using JNPF.ClayObject;
}
@if(Model.IsImportData || Model.IsExport)
{
@:using JNPF.Common.Models.NPOI;
}
@if(Model.Type != 3)
{
@:using JNPF.Common.CodeGen.ExportImport;
}
@if(Model.IsImportData)
{
@:using JNPF.Common.Core.Manager.Files;
@:using JNPF.Common.Dtos;
}
using JNPF.Common.CodeGen.DataParsing;
using JNPF.Common.Const;
using JNPF.Common.Manager;
using JNPF.Common.Enums;
using JNPF.Common.Extension;
using JNPF.Common.Filter;
using JNPF.Common.Models;
using JNPF.Common.Security;
using JNPF.DependencyInjection;
using JNPF.DynamicApiController;
using JNPF.FriendlyException;
using JNPF.Systems.Entitys.Permission;
using JNPF.Systems.Entitys.System;
using JNPF.Systems.Interfaces.System;
using JNPF.Common.Dtos.Datainterface;
@if(Model.Type != 3 && (Model.IsImportData || Model.ParsJnpfKeyConstList.Count > 0))
{
@:using JNPF.VisualDev.Engine;
}
@if(Model.IsImportData)
{
@:using JNPF.VisualDev.Engine.Core;
@:using Microsoft.AspNetCore.Http;
}
using JNPF.@(Model.NameSpace).Entitys.Dto.@Model.ClassName;
using JNPF.@(Model.NameSpace).Entitys;
using JNPF.@(Model.NameSpace).Interfaces;
@if(Model.EnableFlow)
{
@:using JNPF.WorkFlow.Entitys.Entity;
@:using JNPF.WorkFlow.Interfaces.Repository;
}
using Mapster;
using Microsoft.AspNetCore.Mvc;
using SqlSugar;
using JNPF.Common.Models.Authorize;
using JNPF.DatabaseAccessor;
using JNPF.Common.Dtos;

namespace JNPF.@(Model.NameSpace)@(Model.Type == 3 ? ".WorkFlowForm" : "");

/// <summary>
/// 业务实现：@(Model.BusName).
/// </summary>
[ApiDescriptionSettings(Tag = "@(Model.Type == 3 ? Model.NameSpace + "Form" : Model.NameSpace)", Name = "@Model.ClassName", Order = 200)]
[Route("api/@(Model.Type == 3 ? Model.NameSpace+ "/Form" : Model.NameSpace)/[controller]")]
public class @(Model.ClassName)Service : I@(Model.ClassName)Service, IDynamicApiController, ITransient
{
    /// <summary>
    /// 服务基础仓储.
    /// </summary>
    private readonly ISqlSugarRepository<@(Model.ClassName)Entity> _repository;

@if(Model.EnableFlow)
{
    @:/// <summary>
    @:/// 流程仓储.
    @:/// </summary>
    @:private readonly IWorkFlowRepository _workFlowRepository;
}
@if(Model.IsBillRule)
{
@:
    @:/// <summary>
    @:/// 单据规则服务.
    @:/// </summary>
    @:private readonly IBillRullService _billRullService;
}
@if(Model.DbLinkId != "0" || Model.IsImportData)
{
@:
    @:/// <summary>
    @:/// 数据库管理.
    @:/// </summary>
    @:private readonly IDataBaseManager _dataBaseManager;
}

    /// <summary>
    /// 数据接口服务.
    /// </summary>
    private readonly IDataInterfaceService _dataInterfaceService;
    
    /// <summary>
    /// 缓存管理.
    /// </summary>
    private readonly ICacheManager _cacheManager;
    
    /// <summary>
    /// 通用数据解析.
    /// </summary>
    private readonly ControlParsing _controlParsing;

    /// <summary>
    /// 用户管理.
    /// </summary>
    private readonly IUserManager _userManager;

@if(Model.IsImportData)
{
    @:/// <summary>
    @:/// 代码生成导出数据帮助类.
    @:/// </summary>
    @:private readonly ExportImportDataHelper _exportImportDataHelper;
@:
    @:/// <summary>
    @:/// 文件服务.
    @:/// </summary>
    @:private readonly IFileManager _fileManager;
}
@if(Model.DbLinkId != "0")
{
@:
    @:/// <summary>
    @:/// 客户端.
    @:/// </summary>
    @:private static SqlSugarScope? _sqlSugarClient;
}
@if(Model.IsImportData || Model.IsExport)
{
@:
    @:/// <summary>
    @:/// 导出字段.
    @:/// </summary>
    @:private readonly List<ParamsModel> paramList = "[@(Model.ExportField)]".ToList<ParamsModel>();
}
@if(Model.IsImportData)
{
@:
    @:/// <summary>
    @:/// 导入字段.
    @:/// </summary>
    @:private readonly string[] uploaderKey = new string[] @(Model.ImportColumnField);
}
@if(Model.DataRuleJson != null && Model.DataRuleJson != "[]")
{
@:
    @:/// <summary>
    @:/// 配置数据过滤.
    @:/// </summary>
    @:private readonly List<CodeGenDataRuleModuleResourceModel> dataRuleList = "@(Model.DataRuleJson)".ToObject<List<CodeGenDataRuleModuleResourceModel>>();
}

    /// <summary>
    /// 初始化一个<see cref="@(Model.ClassName)Service"/>类型的新实例.
    /// </summary>
    public @(Model.ClassName)Service(
        ISqlSugarRepository<@(Model.ClassName)Entity> repository,
@if(Model.EnableFlow)
{
        @:IWorkFlowRepository workFlowRepository,
}
@if(Model.IsBillRule)
{
        @:IBillRullService billRullService,
}
        IDataInterfaceService dataInterfaceService,
@if(Model.DbLinkId != "0" || Model.IsImportData)
{
        @:IDataBaseManager dataBaseManager,
}
@if(Model.DbLinkId != "0"){
        @:ISqlSugarClient context,
}
@if(Model.IsImportData){
        @:ExportImportDataHelper exportImportDataHelper,
        @:IFileManager fileManager,
}
        ICacheManager cacheManager,
        ControlParsing controlParsing,
        IUserManager userManager)
    {
        _repository = repository;
@if(Model.EnableFlow)
{
        @:_workFlowRepository = workFlowRepository;
}
@if(Model.IsBillRule)
{
        @:_billRullService = billRullService;
}
@if(Model.DbLinkId != "0" || Model.IsImportData)
{
        @:_dataBaseManager = dataBaseManager;
}
@if(Model.DbLinkId != "0")
{
        @:_sqlSugarClient = (SqlSugarScope)context;
}
@if(Model.IsImportData)
{
        @:_exportImportDataHelper = exportImportDataHelper;
        @:_fileManager = fileManager;
}
        _dataInterfaceService = dataInterfaceService;
        _cacheManager = cacheManager;
        _controlParsing = controlParsing;
        _userManager = userManager;
@if(Model.DataRuleJson != null && Model.DataRuleJson != "[]")
{
        @:dataRuleList = dataRuleList.Where(x => x.UserOrigin.Equals(_userManager.UserOrigin)).ToList();
        @:dataRuleList.ForEach(x => x.conditionalModel = _repository.AsSugarClient().Utilities.JsonToConditionalModels(x.conditionalModelJson));
}
    }
@foreach(var item in Model.Function)
{
@switch(item.FullName)
{
@*信息方法*@
case "info":
@:
    @:/// <summary>
    @:/// 获取@(Model.BusName).
    @:/// </summary>
    @:/// <param name="id">主键值.</param>
    @:/// <returns></returns>
    @:[HttpGet("{id}")]
    @:public async Task<dynamic> GetInfo(@(Model.PrimaryKeyPolicy == 1 ? "string" : Model.EnableFlow ? "string" : "long") id)
    @:{
@if(Model.DbLinkId != "0")
{
        @:var dbLink = await _repository.AsSugarClient().Queryable<DbLinkEntity>().FirstAsync(it => it.Id.Equals("@(Model.DbLinkId)"));
        @:_sqlSugarClient = _dataBaseManager.ChangeDataBase(dbLink);
@:
}
        @:var data = (await @(Model.DbLinkId != "0" ? "_sqlSugarClient.Queryable<" + Model.ClassName + "Entity>()" : "_repository.AsQueryable()")
@if(Model.IsSystemControl)
{
            @:.Select(it => new @(Model.ClassName)Entity
            @:{
@*循环展示字段*@
@foreach (var column in Model.TableField){
@if (column.PrimaryKey){
                @:@(column.ColumnName) = it.@column.ColumnName,
}else if(column.jnpfKey != null){
@switch(column.jnpfKey)
{
case "modifyUser":
case "createUser":
                @:@(column.ColumnName) = SqlFunc.Subqueryable<UserEntity>()@(Model.DbLinkId != "0" ? ".AS(\"" + Model.DefaultDbName + ".BASE_USER\")" : "").EnableTableFilter().Where(u => u.Id.Equals(it.@(column.ColumnName))).Select(u => SqlFunc.MergeString(u.RealName, "/", u.Account)),
break;
case "currPosition":
                @:@(column.ColumnName) = SqlFunc.Subqueryable<PositionEntity>()@(Model.DbLinkId != "0" ? ".AS(\"" + Model.DefaultDbName + ".BASE_POSITION\")" : "").EnableTableFilter().Where(p => p.Id.Equals(it.@(column.ColumnName))).Select(p => p.FullName),
break;
default:
                @:@(column.ColumnName) = it.@column.ColumnName,
break;
}
}
}
@if(Model.ConcurrencyLock)
{
                @:Version = it.Version,
}
@if(Model.Type == 3)
{
                @:FlowId = it.FlowId,
}
            @:})
}
            @:.FirstAsync(it => it.@(Model.EnableFlow && Model.PrimaryKeyPolicy == 2 ? "FlowTaskId" : Model.PrimaryKey).Equals(id))).Adapt<@(Model.ClassName)InfoOutput>();
@:
@if(Model.IsSystemControl)
{
@foreach (var column in Model.TableField){
@switch(column.jnpfKey)
{
case "currPosition":
            @:if (data!=null && data.@(column.LowerColumnName).IsNullOrEmpty()) data.@(column.LowerColumnName) = " ";
break;
case "currOrganize":
            @:if (data!=null && data.@(column.LowerColumnName).IsNullOrEmpty()) data.@(column.LowerColumnName) = " ";
            @:else data.@(column.LowerColumnName) = _repository.AsSugarClient().Queryable<OrganizeEntity>().Where(it => data.@(column.LowerColumnName).ToObject<List<string>>().LastOrDefault().Equals(it.Id)).Select(it => it.FullName).First();
break;
}
}
}
            @:return data;
    @:}
break;
@*流程保存*@
case "save":
@:
    @:/// <summary>
    @:/// 保存.
    @:/// </summary>
    @:/// <param name="id">主键值.</param>
    @:/// <param name="input">表单数据.</param>
    @:/// <returns></returns>
    @:[HttpPost("{id}")]
    @:public async Task Save(string id, [FromBody] @(Model.ClassName)CrInput input)
    @:{
        @:input = CodeGenHelper.SetEmptyStringNull(input);
@*跨库*@
@if(Model.DbLinkId != "0")
{
        @:var dbLink = await _repository.AsSugarClient().Queryable<DbLinkEntity>().FirstAsync(it => it.Id.Equals("@(Model.DbLinkId)"));
        @:_sqlSugarClient = _dataBaseManager.ChangeDataBase(dbLink);
@:
}
        @:var entity = input.Adapt<@(Model.ClassName)Entity>();
@if(Model.PrimaryKeyPolicy == 1){
        @:entity.@(Model.PrimaryKey) = id;
}
@if(Model.EnableFlow){
        @:entity.FlowTaskId = id;
}
        @:if (await @(Model.DbLinkId != "0" ? "_sqlSugarClient.Queryable<" + Model.ClassName + "Entity>()." : "_repository.Is")AnyAsync(x => x.@(Model.PrimaryKeyPolicy == 1 ? Model.PrimaryKey : "FlowTaskId").Equals(id)@(Model.PrimaryKeyPolicy == 2 ? " || x." + Model.PrimaryKey + ".Equals(id)" : "")))
        @:{
@if(Model.PrimaryKeyPolicy  == 2)
{
            @:entity.@(Model.PrimaryKey) = (await @(Model.DbLinkId != "0" ? "_sqlSugarClient.Queryable<" + Model.ClassName + "Entity>()." : "_repository.Get")FirstAsync(it=> it.FlowTaskId.Equals(entity.FlowTaskId)@(Model.PrimaryKeyPolicy == 2 ? " || it." + Model.PrimaryKey + ".Equals(entity.FlowTaskId)" : ""))).@(Model.PrimaryKey);
}
@{ GetAndModifyDataMethodTemplate(); }
        @:}
        @:else
        @:{
@{ GetTheNewDataMethodTemplate(); }
        @:}
    @:}
break;
@*详情*@
case "detail":
@:
    @:/// <summary>
    @:/// @(Model.BusName)详情.
    @:/// </summary>
    @:/// <param name="id">主键值.</param>
    @:/// <returns></returns>
    @:[HttpGet("Detail/{id}")]
    @:[UnifySerializerSetting("special")]
    @:public async Task<dynamic> GetDetails(@(Model.PrimaryKeyPolicy == 1 ? "string" : "long") id)
    @:{
@*跨库*@
@if(Model.DbLinkId != "0")
{
        @:var dbLink = await _repository.AsSugarClient().Queryable<DbLinkEntity>().FirstAsync(it => it.Id.Equals("@(Model.DbLinkId)"));
        @:_sqlSugarClient = _dataBaseManager.ChangeDataBase(dbLink);
@:
}
        @:var data = await @(Model.DbLinkId != "0" ? "_sqlSugarClient.Queryable<" + Model.ClassName + "Entity>()" : "_repository.AsQueryable()")
            @:.Select(it => new @(Model.ClassName)DetailOutput
            @:{
@*循环关联字段*@
@foreach (var column in Model.RelationsField)
{
                @:@(column.RelationColumnName) = it.@column.ColumnName,
}
@*循环展示字段*@
@foreach (var column in Model.TableField){
@if (column.PrimaryKey){
                @:@(column.LowerColumnName) = it.@column.ColumnName,
}else if(column.jnpfKey != null){
@switch(column.jnpfKey)
{
case "uploadFile":
case "uploadImg":
                @:@(column.LowerColumnName) = it.@column.ColumnName,
break;
case "slider":
                @:@(column.LowerColumnName) = SqlFunc.ToInt32(it.@(column.ColumnName)),
break;
case "switch":
                @:@(column.LowerColumnName) = SqlFunc.IIF(SqlFunc.ToInt32(it.@(column.ColumnName)) == 1, "@(column.ActiveTxt)", "@(column.InactiveTxt)"),
break;
case "datePicker":
                @:@(column.LowerColumnName) = it.@(column.ColumnName).Value.ToString("@(column.Format)"),
break;
case "createTime":
case "modifyTime":
                @:@(column.LowerColumnName) = it.@(column.ColumnName).Value.ToString("yyyy-MM-dd HH:mm:ss"),
break;
case "modifyUser":
case "createUser":
                @:@(column.LowerColumnName) = SqlFunc.Subqueryable<UserEntity>()@(Model.DbLinkId != "0" ? ".AS(\"" + Model.DefaultDbName + ".BASE_USER\")" : "").EnableTableFilter().Where(u => u.Id.Equals(it.@(column.ColumnName))).Select(u => SqlFunc.MergeString(u.RealName, "/", u.Account)),
break;
case "currPosition":
                @:@(column.LowerColumnName) = SqlFunc.Subqueryable<PositionEntity>()@(Model.DbLinkId != "0" ? ".AS(\"" + Model.DefaultDbName + ".BASE_POSITION\")" : "").EnableTableFilter().Where(p => p.Id.Equals(it.@(column.ColumnName))).Select(p => p.FullName),
break;
case "userSelect":
@if(!column.IsMultiple)
{
                @:@(column.LowerColumnName) = SqlFunc.Subqueryable<UserEntity>()@(Model.DbLinkId != "0" ? ".AS(\""+ Model.DefaultDbName +".BASE_USER\")" : "").EnableTableFilter().Where(u => u.Id.Equals(it.@(column.ColumnName))).Select(u => u.RealName),
}else{
                @:@(column.LowerColumnName) = it.@column.ColumnName,
}
break;
case "posSelect":
@if(!column.IsMultiple)
{
                @:@(column.LowerColumnName) = SqlFunc.Subqueryable<PositionEntity>()@(Model.DbLinkId != "0" ? ".AS(\""+ Model.DefaultDbName +".BASE_POSITION\")" : "").EnableTableFilter().Where(p => p.Id.Equals(it.@(column.ColumnName))).Select(p => p.FullName),
}else{
                @:@(column.LowerColumnName) = it.@column.ColumnName,
}
break;
case "depSelect":
@if(!column.IsMultiple)
{
                @:@(column.LowerColumnName) = SqlFunc.Subqueryable<OrganizeEntity>()@(Model.DbLinkId != "0" ? ".AS(\""+ Model.DefaultDbName +".BASE_ORGANIZE\")" : "").EnableTableFilter().Where(o => o.Id.Equals(it.@(column.ColumnName))).Select(o => o.FullName),
}else{
                @:@(column.LowerColumnName) = it.@column.ColumnName,
}
break;
case "roleSelect":
@if(!column.IsMultiple)
{
                @:@(column.LowerColumnName) = SqlFunc.Subqueryable<RoleEntity>()@(Model.DbLinkId != "0" ? ".AS(\""+ Model.DefaultDbName +".BASE_ROLE\")" : "").EnableTableFilter().Where(r => r.Id.Equals(it.@(column.ColumnName))).Select(r => r.FullName),
}else{
                @:@(column.LowerColumnName) = it.@column.ColumnName,
}
break;
case "groupSelect":
@if(!column.IsMultiple)
{
                @:@(column.LowerColumnName) = SqlFunc.Subqueryable<GroupEntity>()@(Model.DbLinkId != "0" ? ".AS(\""+ Model.DefaultDbName +".BASE_GROUP\")" : "").EnableTableFilter().Where(g => g.Id.Equals(it.@(column.ColumnName))).Select(g => g.FullName),
}else{
                @:@(column.LowerColumnName) = it.@column.ColumnName,
}
break;
case "select":
case "radio":
case "treeSelect":
@switch(column.ControlsDataType)
{
case "dictionary":
@if(!column.IsMultiple)
{
                @:@(column.LowerColumnName) = SqlFunc.Subqueryable<DictionaryDataEntity>()@(Model.DbLinkId != "0" ? ".AS(\""+ Model.DefaultDbName +".BASE_DICTIONARYDATA\")" : "").EnableTableFilter().Where(dic => dic.@(column.Value == "id" ? "Id" : "EnCode").Equals(it.@(column.ColumnName)) && dic.DictionaryTypeId.Equals("@(column.propsUrl)")).Select(dic => dic.FullName),
}else{
                @:@(column.LowerColumnName) = it.@column.ColumnName,
}
break;
default:
                @:@(column.LowerColumnName) = it.@column.ColumnName@(column.NetType == "int?" ? ".ToString()" : ""),
break;
}
break;
default:
                @:@(column.LowerColumnName) = it.@column.ColumnName@(column.NetType == "int?" ? ".ToString()" : ""),
break;
}
}
}
            @:}).MergeTable().Where(it => it.@(Model.LowerPrimaryKey) == id).ToListAsync();
@if(Model.IsDetailConversion)
{
@:
        @:await _repository.AsSugarClient().ThenMapperAsync(data, async item =>
        @:{
            @:var linkageParameters = new List<DataInterfaceParameter>();
@foreach (var column in Model.TableField)
{
@{var dataCount = column.StaticData != null ? column.StaticData.Count : 0;}
@if(column.IsDetailConversion)
{
@switch(column.jnpfKey)
{
case "uploadFile":
case "uploadImg":
            @:if(item.@(column.LowerColumnName) != null)
            @:{
                @:item.@(column.LowerColumnName) = item.@(column.LowerColumnName).ToString().ToObject<List<FileControlsModel>>();
            @:}
            @:else
            @:{
                @:item.@(column.LowerColumnName) = new List<FileControlsModel>();
            @:}
@:
break;
case "select":
            @:// @column.ColumnComment
@switch(column.ControlsDataType)
{
case "static":
            @:var @(column.LowerColumnName)Data = "[@foreach(var data in column.StaticData){@("{\\\"id\\\":\\\"" + @data.id + "\\\",\\\"fullName\\\":\\\""+ @data.fullName + "\\\"}")@(dataCount == 1 ? "" : ",")dataCount--;}]".ToObject<List<StaticDataModel>>();
            @:if(item.@(column.LowerColumnName) != null)
            @:{
@if(!column.IsMultiple)
{
                @:item.@(column.LowerColumnName) = @(column.LowerColumnName)Data.Find(it => item.@(column.LowerColumnName).Equals(it.id))?.fullName;
}else{
                @:var @(column.LowerColumnName + @column.upperJnpfKey) = item.@(column.LowerColumnName).ToObject<List<string>>();
                @:item.@(column.LowerColumnName) = string.Join(",", @(column.LowerColumnName)Data.FindAll(it => @(column.LowerColumnName + @column.upperJnpfKey).Contains(it.id)).Select(s => s.fullName));
}
            @:}
break;
case "dictionary":
@if(column.IsMultiple)
{
            @:if(item.@(column.LowerColumnName) != null)
            @:{
                @:var @(column.LowerColumnName + @column.upperJnpfKey) = item.@(column.LowerColumnName).ToObject<List<string>>();
                @:item.@(column.LowerColumnName) = string.Join(",", await _repository.AsSugarClient().Queryable<DictionaryDataEntity>().Where(it => @(column.LowerColumnName + @column.upperJnpfKey).Contains(it.@(column.Value == "id" ? "Id" : "EnCode")) && it.DictionaryTypeId.Equals("@(column.propsUrl)")).Select(it => it.FullName).ToListAsync());
            @:}
}
break;
case "dynamic":
            @:if(item.@(column.LowerColumnName) != null)
            @:{
@if(column.IsLinkage)
{
                @:linkageParameters = new List<DataInterfaceParameter>();
@foreach(var linkage in column.LinkageConfig)
{
                @:linkageParameters.Add(new DataInterfaceParameter
                @:{
                    @:field = "@(linkage.field)",
                    @:relationField = @(linkage.sourceType==1 && linkage.relationField!="string.Empty" ? "item."+linkage.relationField : linkage.relationField),
                    @:isSubTable = @(linkage.isSubTable.ToString().ToLower()),
                    @:dataType = "@(linkage.dataType)",
                    @:defaultValue = "@(linkage.defaultValue)",
                    @:fieldName = "@(linkage.fieldName)",
                    @:sourceType = @(linkage.sourceType)
                @:});
}
}
                @:var @(column.LowerColumnName)Data = await _dataInterfaceService.GetDynamicList("@(column.LowerColumnName)", "@(column.propsUrl)", "@(column.Value)", "@(column.Label)", ""@(column.IsLinkage ? ", linkageParameters" : ""));
@if(!column.IsMultiple)
{
                @:item.@(column.LowerColumnName) = @(column.LowerColumnName)Data.Find(it => it.id.Equals(item.@(column.LowerColumnName)))?.fullName;
}else{
                @:var @(column.LowerColumnName + @column.upperJnpfKey) = item.@(column.LowerColumnName).ToObject<List<string>>();
                @:item.@(column.LowerColumnName) = string.Join(",", @(column.LowerColumnName)Data.FindAll(it => @(column.LowerColumnName + @column.upperJnpfKey).Contains(it.id)).Select(s => s.fullName));
}
            @:}
break;
}
@:
break;
case "checkbox":
            @:// @column.ColumnComment
@switch(column.ControlsDataType)
{
case "static":
            @:var @(column.LowerColumnName)Data = "[@foreach(var data in column.StaticData){@("{\\\"id\\\":\\\"" + @data.id + "\\\",\\\"fullName\\\":\\\""+ @data.fullName + "\\\"}")@(dataCount == 1 ? "" : ",")dataCount--;}]".ToObject<List<StaticDataModel>>();
            @:if(item.@(column.LowerColumnName) != null)
            @:{
                @:var @(column.LowerColumnName + @column.upperJnpfKey) = item.@(column.LowerColumnName).ToObject<List<string>>();
                @:item.@(column.LowerColumnName) = string.Join(",", @(column.LowerColumnName)Data.FindAll(it => @(column.LowerColumnName + @column.upperJnpfKey).Contains(it.id)).Select(s => s.fullName));
            @:}
break;
case "dictionary":
            @:if(item.@(column.LowerColumnName) != null)
            @:{
                @:var @(column.LowerColumnName + @column.upperJnpfKey) = item.@(column.LowerColumnName).ToObject<List<string>>();
                @:item.@(column.LowerColumnName) = string.Join(",", await _repository.AsSugarClient().Queryable<DictionaryDataEntity>().Where(it => @(column.LowerColumnName + @column.upperJnpfKey).Contains(it.@(column.Value == "id" ? "Id" : "EnCode")) && it.DictionaryTypeId.Equals("@(column.propsUrl)")).Select(it => it.FullName).ToListAsync());
            @:}
break;
case "dynamic":
            @:if(item.@(column.LowerColumnName) != null)
            @:{
@if(column.IsLinkage)
{
                @:linkageParameters = new List<DataInterfaceParameter>();
@foreach(var linkage in column.LinkageConfig)
{
                @:linkageParameters.Add(new DataInterfaceParameter
                @:{
                    @:field = "@(linkage.field)",
                    @:relationField = @(linkage.sourceType==1 && linkage.relationField!="string.Empty" ? "item."+linkage.relationField : linkage.relationField),
                    @:isSubTable = @(linkage.isSubTable.ToString().ToLower()),
                    @:dataType = "@(linkage.dataType)",
                    @:defaultValue = "@(linkage.defaultValue)",
                    @:fieldName = "@(linkage.fieldName)",
                    @:sourceType = @(linkage.sourceType)
                @:});
}
}
                @:var @(column.LowerColumnName)Data = await _dataInterfaceService.GetDynamicList("@(column.LowerColumnName)", "@(column.propsUrl)", "@(column.Value)", "@(column.Label)", ""@(column.IsLinkage ? ", linkageParameters" : ""));
                @:var @(column.LowerColumnName + @column.upperJnpfKey) = item.@(column.LowerColumnName).ToObject<List<string>>();
                @:item.@(column.LowerColumnName) = string.Join(",", @(column.LowerColumnName)Data.FindAll(it => @(column.LowerColumnName + @column.upperJnpfKey).Contains(it.id)).Select(s => s.fullName));
            @:}
break;
}
@:
break;
case "radio":
            @:// @column.ColumnComment
@switch(column.ControlsDataType)
{
case "static":
            @:var @(column.LowerColumnName)Data = "[@foreach(var data in column.StaticData){@("{\\\"id\\\":\\\"" + @data.id + "\\\",\\\"fullName\\\":\\\""+ @data.fullName + "\\\"}")@(dataCount == 1 ? "" : ",")dataCount--;}]".ToObject<List<StaticDataModel>>();
            @:if(item.@(column.LowerColumnName) != null)
            @:{
                @:item.@(column.LowerColumnName) = @(column.LowerColumnName)Data.Find(it => item.@(column.LowerColumnName).Equals(it.id))?.fullName;
            @:}
break;
case "dynamic":
            @:if(item.@(column.LowerColumnName) != null)
            @:{
@if(column.IsLinkage)
{
                @:linkageParameters = new List<DataInterfaceParameter>();
@foreach(var linkage in column.LinkageConfig)
{
                @:linkageParameters.Add(new DataInterfaceParameter
                @:{
                    @:field = "@(linkage.field)",
                    @:relationField = @(linkage.sourceType==1 && linkage.relationField!="string.Empty" ? "item."+linkage.relationField : linkage.relationField),
                    @:isSubTable = @(linkage.isSubTable.ToString().ToLower()),
                    @:dataType = "@(linkage.dataType)",
                    @:defaultValue = "@(linkage.defaultValue)",
                    @:fieldName = "@(linkage.fieldName)",
                    @:sourceType = @(linkage.sourceType)
                @:});
}
}
            @:var @(column.LowerColumnName)Data = await _dataInterfaceService.GetDynamicList("@(column.LowerColumnName)", "@(column.propsUrl)", "@(column.Value)", "@(column.Label)", "@(column.Children)"@(column.IsLinkage ? ", linkageParameters" : ""));
                @:item.@(column.LowerColumnName) = string.Join(",", @(column.LowerColumnName)Data.Find(it => it.id.Equals(item.@(column.LowerColumnName)))?.fullName);
            @:}
break;
}
@:
break;
case "cascader":
@switch(column.ControlsDataType)
{
case "static":
            @:// @column.ColumnComment
            @:var @(column.LowerColumnName)Data = "[@foreach(var data in column.StaticData){@("{\\\"id\\\":\\\"" + @data.id + "\\\",\\\"fullName\\\":\\\""+ @data.fullName + "\\\"}")@(dataCount == 1 ? "" : ",")dataCount--;}]".ToObject<List<StaticDataModel>>();
            @:if(item.@(column.LowerColumnName) != null)
            @:{
@if(!column.IsMultiple)
{
                @:var @(column.LowerColumnName + @column.upperJnpfKey) = item.@(column.LowerColumnName).ToObject<List<string>>();
        @if(column.ShowAllLevels){
                @:item.@(column.LowerColumnName) = string.Join("@(column.Separator)", @(column.LowerColumnName)Data.FindAll(it => @(column.LowerColumnName + @column.upperJnpfKey).Contains(it.id)).Select(s => s.fullName));
        }else{
                @:item.@(column.LowerColumnName) = @(column.LowerColumnName)Data.FindAll(it => @(column.LowerColumnName + @column.upperJnpfKey).Contains(it.id)).Select(s => s.fullName).FirstOrDefault();
        }
}else{
                @:var @(column.LowerColumnName + @column.upperJnpfKey) = item.@(column.LowerColumnName).ToObject<List<List<string>>>();
                @:var @(column.LowerColumnName)Excessive = new List<string>();
                @:foreach (var @(column.LowerColumnName) in @(column.LowerColumnName + @column.upperJnpfKey))
                @:{
        @if(column.ShowAllLevels){
                    @:@(column.LowerColumnName)Excessive.Add(string.Join("@(column.Separator)", @(column.LowerColumnName)Data.FindAll(it => @(column.LowerColumnName).Contains(it.id)).Select(s => s.fullName)));
        }else{
                    @:@(column.LowerColumnName)Excessive.Add(@(column.LowerColumnName)Data.FindAll(it => @(column.LowerColumnName).Contains(it.id)).Select(s => s.fullName).FirstOrDefault());
        }
                @:}
@:
                @:item.@(column.LowerColumnName) = string.Join(",", @(column.LowerColumnName)Excessive);
}
            @:}
break;
case "dictionary":
            @:if(item.@(column.LowerColumnName) != null)
            @:{
@if(!column.IsMultiple)
{
                @:var @(column.LowerColumnName + @column.upperJnpfKey) = item.@(column.LowerColumnName).ToObject<List<string>>();
        @if(column.ShowAllLevels){
                @:item.@(column.LowerColumnName) = string.Join("@(column.Separator)", await _repository.AsSugarClient().Queryable<DictionaryDataEntity>().Where(it => @(column.LowerColumnName + @column.upperJnpfKey).Contains(it.@(column.Value == "id" ? "Id" : "EnCode")) && it.DictionaryTypeId.Equals("@(column.propsUrl)")).Select(it => it.FullName).ToListAsync());
        }else{
                @:item.@(column.LowerColumnName) = await _repository.AsSugarClient().Queryable<DictionaryDataEntity>().Where(it => @(column.LowerColumnName + @column.upperJnpfKey).Contains(it.@(column.Value == "id" ? "Id" : "EnCode")) && it.DictionaryTypeId.Equals("@(column.propsUrl)")).Select(it => it.FullName).FirstAsync();
        }
}else{
                @:var @(column.LowerColumnName + @column.upperJnpfKey) = item.@(column.LowerColumnName).ToObject<List<List<string>>>();
                @:var @(column.LowerColumnName)Excessive = new List<string>();
                @:foreach (var @(column.LowerColumnName) in @(column.LowerColumnName + @column.upperJnpfKey))
                @:{
        @if(column.ShowAllLevels){
                    @:@(column.LowerColumnName)Excessive.Add(string.Join("@(column.Separator)", await _repository.AsSugarClient().Queryable<DictionaryDataEntity>().Where(it => @(column.LowerColumnName).Contains(it.@(column.Value == "id" ? "Id" : "EnCode")) && it.DictionaryTypeId.Equals("@(column.propsUrl)")).Select(it => it.FullName).ToListAsync()));
        }else{
                    @:@(column.LowerColumnName)Excessive.Add(await _repository.AsSugarClient().Queryable<DictionaryDataEntity>().Where(it => @(column.LowerColumnName).Contains(it.@(column.Value == "id" ? "Id" : "EnCode")) && it.DictionaryTypeId.Equals("@(column.propsUrl)")).Select(it => it.FullName).FirstAsync());
        }
                @:}
@:
                @:item.@(column.LowerColumnName) = string.Join(",", @(column.LowerColumnName)Excessive);
}
            @:}
break;
case "dynamic":
            @:if(item.@(column.LowerColumnName) != null)
            @:{
@if(column.IsLinkage)
{
                @:linkageParameters = new List<DataInterfaceParameter>();
@foreach(var linkage in column.LinkageConfig)
{
                @:linkageParameters.Add(new DataInterfaceParameter
                @:{
                    @:field = "@(linkage.field)",
                    @:relationField = @(linkage.sourceType==1 && linkage.relationField!="string.Empty" ? "item."+linkage.relationField : linkage.relationField),
                    @:isSubTable = @(linkage.isSubTable.ToString().ToLower()),
                    @:dataType = "@(linkage.dataType)",
                    @:defaultValue = "@(linkage.defaultValue)",
                    @:fieldName = "@(linkage.fieldName)",
                    @:sourceType = @(linkage.sourceType)
                @:});
}
}
            @:var @(column.LowerColumnName)Data = await _dataInterfaceService.GetDynamicList("@(column.LowerColumnName)", "@(column.propsUrl)", "@(column.Value)", "@(column.Label)", "@(column.Children)"@(column.IsLinkage ? ", linkageParameters" : ""));
@if(!column.IsMultiple)
{
                @:var @(column.LowerColumnName + @column.upperJnpfKey) = item.@(column.LowerColumnName).ToObject<List<string>>();
        @if(column.ShowAllLevels){
                @:item.@(column.LowerColumnName) = string.Join("@(column.Separator)", @(column.LowerColumnName)Data.FindAll(it => @(column.LowerColumnName + @column.upperJnpfKey).Contains(it.id)).Select(s => s.fullName));
        }else{
                @:item.@(column.LowerColumnName) = @(column.LowerColumnName)Data.FindAll(it => @(column.LowerColumnName + @column.upperJnpfKey).Contains(it.id)).Select(s => s.fullName).FirstOrDefault();
        }
}else{
                @:var @(column.LowerColumnName + @column.upperJnpfKey) = item.@(column.LowerColumnName).ToObject<List<List<string>>>();
                @:var @(column.LowerColumnName)Excessive = new List<string>();
                @:foreach (var @(column.LowerColumnName) in @(column.LowerColumnName + @column.upperJnpfKey))
                @:{
        @if(column.ShowAllLevels){
                    @:@(column.LowerColumnName)Excessive.Add(string.Join("@(column.Separator)", @(column.LowerColumnName)Data.FindAll(it => @(column.LowerColumnName).Contains(it.id)).Select(it => it.fullName)));
        }else{
                    @:@(column.LowerColumnName)Excessive.Add(@(column.LowerColumnName)Data.FindAll(it => @(column.LowerColumnName).Contains(it.id)).Select(it => it.fullName).FirstOrDefault());
        }
                @:}
@:
                @:item.@(column.LowerColumnName) = string.Join(",", @(column.LowerColumnName)Excessive);
}
            @:}
break;
}
@:
break;
case "organizeSelect":
            @:// @column.ColumnComment
            @:item.@(column.LowerColumnName) = _controlParsing.GetOrganizeName(@(column.IsMultiple.ToString().ToLower()),item.@(column.LowerColumnName));
@:
break;
case "currOrganize":

            @:// @column.ColumnComment
            @:item.@(column.LowerColumnName) = _controlParsing.GetCurrOrganizeName("@(column.ShowLevel)",item.@(column.LowerColumnName));
break;
case "depSelect":
            @:// @column.ColumnComment
            @:item.@(column.LowerColumnName) = _controlParsing.GetDepartmentName(@(column.IsMultiple.ToString().ToLower()),item.@(column.LowerColumnName));
@:
break;
case "posSelect":
            @:// @column.ColumnComment
            @:if(item.@(column.LowerColumnName) != null)
            @:{
                @:var @(column.LowerColumnName + @column.upperJnpfKey) = item.@(column.LowerColumnName).ToObject<List<string>>();
                @:item.@(column.LowerColumnName) = string.Join(",", await _repository.AsSugarClient().Queryable<PositionEntity>().Where(it => @(column.LowerColumnName + @column.upperJnpfKey).Contains(it.Id)).Select(it => it.FullName).ToListAsync());
            @:}
@:
break;
case "userSelect":
            @:// @column.ColumnComment
            @:if(item.@(column.LowerColumnName) != null)
            @:{
                @:var @(column.LowerColumnName + @column.upperJnpfKey) = item.@(column.LowerColumnName).ToObject<List<string>>();
                @:item.@(column.LowerColumnName) = string.Join(",", await _repository.AsSugarClient().Queryable<UserEntity>().Where(a => @(column.LowerColumnName + @column.upperJnpfKey).Contains(a.Id)).Select(it => it.RealName).ToListAsync());
            @:}
@:
break;
case "roleSelect":
            @:// @column.ColumnComment
            @:if(item.@(column.LowerColumnName) != null)
            @:{
                @:var @(column.LowerColumnName + @column.upperJnpfKey) = item.@(column.LowerColumnName).ToObject<List<string>>();
                @:item.@(column.LowerColumnName) = string.Join(",", await _repository.AsSugarClient().Queryable<RoleEntity>().Where(it => @(column.LowerColumnName + @column.upperJnpfKey).Contains(it.Id)).Select(it => it.FullName).ToListAsync());
            @:}
@:
break;
case "groupSelect":
            @:// @column.ColumnComment
            @:if(item.@(column.LowerColumnName) != null)
            @:{
                @:var @(column.LowerColumnName + @column.upperJnpfKey) = item.@(column.LowerColumnName).ToObject<List<string>>();
                @:item.@(column.LowerColumnName) = string.Join(",", await _repository.AsSugarClient().Queryable<GroupEntity>().Where(it => @(column.LowerColumnName + @column.upperJnpfKey).Contains(it.Id)).Select(it => it.FullName).ToListAsync());
            @:}
@:
break;
case "treeSelect":
            @:// @column.ColumnComment
@switch(column.ControlsDataType)
{
case "static":
            @:var @(column.LowerColumnName)Data = "[@foreach(var data in column.StaticData){@("{\\\"id\\\":\\\"" + @data.id + "\\\",\\\"fullName\\\":\\\""+ @data.fullName + "\\\"}")@(dataCount == 1 ? "" : ",")dataCount--;}]".ToObject<List<StaticDataModel>>();
            @:if(item.@(column.LowerColumnName) != null)
            @:{
@if(!column.IsMultiple)
{
                @:item.@(column.LowerColumnName) = @(column.LowerColumnName)Data.Find(it => it.id.Equals(item.@(column.LowerColumnName)))?.fullName;
}else{
                @:var @(column.LowerColumnName + @column.upperJnpfKey) = item.@(column.LowerColumnName).ToObject<List<string>>();
                @:item.@(column.LowerColumnName) = string.Join(",", @(column.LowerColumnName)Data.FindAll(it => @(column.LowerColumnName + @column.upperJnpfKey).Contains(it.id)).Select(s => s.fullName));
}
            @:}
break;
case "dictionary":
@if(column.IsMultiple)
{
            @:if(item.@(column.LowerColumnName) != null)
            @:{
                @:var @(column.LowerColumnName + @column.upperJnpfKey) = item.@(column.LowerColumnName).ToObject<List<string>>();
                @:item.@(column.LowerColumnName) = string.Join(",", await _repository.AsSugarClient().Queryable<DictionaryDataEntity>().Where(it => @(column.LowerColumnName + @column.upperJnpfKey).Contains(it.@(column.Value == "id" ? "Id" : "EnCode")) && it.DictionaryTypeId.Equals("@(column.propsUrl)")).Select(it => it.FullName).ToListAsync());
            @:}
}
break;
case "dynamic":
            @:if(item.@(column.LowerColumnName) != null)
            @:{
@if(column.IsLinkage)
{
                @:linkageParameters = new List<DataInterfaceParameter>();
@foreach(var linkage in column.LinkageConfig)
{
                @:linkageParameters.Add(new DataInterfaceParameter
                @:{
                    @:field = "@(linkage.field)",
                    @:relationField = @(linkage.sourceType==1 && linkage.relationField!="string.Empty" ? "item."+linkage.relationField : linkage.relationField),
                    @:isSubTable = @(linkage.isSubTable.ToString().ToLower()),
                    @:dataType = "@(linkage.dataType)",
                    @:defaultValue = "@(linkage.defaultValue)",
                    @:fieldName = "@(linkage.fieldName)",
                    @:sourceType = @(linkage.sourceType)
                @:});
}
}
                @:var @(column.LowerColumnName)Data = await _dataInterfaceService.GetDynamicList("@(column.LowerColumnName)", "@(column.propsUrl)", "@(column.Value)", "@(column.Label)", "@(column.Children)"@(column.IsLinkage ? ", linkageParameters" : ""));
@if(!column.IsMultiple)
{
                @:item.@(column.LowerColumnName) = @(column.LowerColumnName)Data.Find(it => it.id.Equals(item.@(column.LowerColumnName)))?.fullName;
}else{
                @:var @(column.LowerColumnName + @column.upperJnpfKey) = item.@(column.LowerColumnName).ToObject<List<string>>();
                @:item.@(column.LowerColumnName) = string.Join(",", @(column.LowerColumnName)Data.FindAll(it => @(column.LowerColumnName + @column.upperJnpfKey).Contains(it.id)).Select(it => it.fullName));
}
            @:}
break;
}
@:
break;
case "areaSelect":
            @:// @column.ColumnComment
            @:if(item.@(column.LowerColumnName) != null)
            @:{
@if(!column.IsMultiple)
{
                @:var @(column.LowerColumnName + @column.upperJnpfKey) = item.@(column.LowerColumnName).ToObject<List<string>>();
                @:item.@(column.LowerColumnName) = string.Join("/", await _repository.AsSugarClient().Queryable<ProvinceEntity>().Where(a => @(column.LowerColumnName + @column.upperJnpfKey).Contains(a.Id)).Select(it => it.FullName).ToListAsync());
}else{
                @:var @(column.LowerColumnName + @column.upperJnpfKey) = item.@(column.LowerColumnName).ToObject<List<List<string>>>();
                @:var @(column.LowerColumnName)Excessive = new List<string>();
                @:foreach (var @(column.LowerColumnName) in @(column.LowerColumnName + @column.upperJnpfKey))
                @:{
                    @:@(column.LowerColumnName)Excessive.Add(string.Join("/", await _repository.AsSugarClient().Queryable<ProvinceEntity>().Where(a => @(column.LowerColumnName).Contains(a.Id)).Select(it => it.FullName).ToListAsync()));
                @:}
@:
                @:item.@(column.LowerColumnName) = string.Join(",", @(column.LowerColumnName)Excessive);
}
            @:}
@:
break;
case "popupTableSelect":
            @:// @column.ColumnComment
@if(column.IsLinkage)
{
            @:linkageParameters = new List<DataInterfaceParameter>();
@foreach(var linkage in column.LinkageConfig)
{
            @:linkageParameters.Add(new DataInterfaceParameter
            @:{
                    @:field = "@(linkage.field)",
                    @:relationField = @(linkage.sourceType==1 && linkage.relationField!="string.Empty" ? "item."+linkage.relationField : linkage.relationField),
                    @:isSubTable = @(linkage.isSubTable.ToString().ToLower()),
                    @:dataType = "@(linkage.dataType)",
                    @:defaultValue = "@(linkage.defaultValue)",
                    @:fieldName = "@(linkage.fieldName)",
                    @:sourceType = @(linkage.sourceType)
            @:});
}
}
            @:var @(column.LowerColumnName)Data = await _dataInterfaceService.GetDynamicList("@(column.LowerColumnName)", "@(column.propsUrl)", "@(column.Value)", "@(column.Label)", "@(column.Children)"@(column.IsLinkage ? ", linkageParameters" : ""));
            @:if(item.@(column.LowerColumnName) != null)
            @:{
@if(!column.IsMultiple)
{
                @:item.@(column.LowerColumnName) = @(column.LowerColumnName)Data.Find(it => it.id.Equals(item.@(column.LowerColumnName)))?.fullName;
}else{
                @:var @(column.LowerColumnName + @column.upperJnpfKey) = item.@(column.LowerColumnName).ToObject<List<string>>();
                @:item.@(column.LowerColumnName) = string.Join(",", @(column.LowerColumnName)Data.FindAll(it => @(column.LowerColumnName + @column.upperJnpfKey).Contains(it.id)).Select(it => it.fullName));
}
            @:}
@:
break;
}
}
}
        @:});
}
@if(Model.ParsJnpfKeyConstListDetails.Count > 0)
{
@:
        @:var resData = data.ToJsonStringOld().ToObjectOld<List<Dictionary<string, object>>>();
        @:List<FieldsModel> fieldList = new List<FieldsModel>();
        @:fieldList.AddRange(ExportImportDataHelper.GetDataConversionTemplateParsing<@(Model.ClassName)Entity>(new @(Model.ClassName)Entity()));
@foreach (var jnpfKeyConst in Model.ParsJnpfKeyConstListDetails)
{
        @:resData = await _controlParsing.GetParsDataList(resData, "@(jnpfKeyConst[1])", "@(jnpfKeyConst[0])", _userManager.TenantId, fieldList);
}
@:
        @:return resData.FirstOrDefault();
}else{
        @:return data.FirstOrDefault();
}
    @:}
break;
@*分页列表*@
case "page":
@:
    @:/// <summary>
    @:/// 获取@(Model.BusName)列表.
    @:/// </summary>
    @:/// <param name="input">请求参数.</param>
    @:/// <returns></returns>
@if(item.IsInterface)
{
    @:[HttpPost("List")]
}
    @:@(item.IsInterface ? "public" : "private") async Task<dynamic> GetList(@(item.IsInterface ? "[FromBody] " : "")@(Model.ClassName)ListQueryInput input)
    @:{
@if(Model.DbLinkId != "0")
{
        @:var dbLink = await _repository.AsSugarClient().Queryable<DbLinkEntity>().FirstAsync(it => it.Id.Equals("@(Model.DbLinkId)"));
        @:_sqlSugarClient = _dataBaseManager.ChangeDataBase(dbLink);
@:
}
@if(Model.EnableFlow)
{
        @:var flowIdList = await _controlParsing.GetFlowIdListByTemplateId(input.flowId);
}
@if(Model.UseDataPermission)
{
        @:var authorizeWhere = new List<IConditionalModel>();
@:
        @:// 数据权限过滤
        @:if (_userManager.User.IsAdministrator == 0)
        @:{
            @:authorizeWhere = await _userManager.GetConditionAsync<@(Model.ClassName)ListOutput>(input.menuId, "@(Model.OriginalPrimaryKey)", _userManager.UserOrigin.Equals("pc") ? @(Model.PcUseDataPermission) : @(Model.AppUseDataPermission), @(Model.PrimaryKeyPolicy));
        @:}
@:
}
@if(Model.IsSearchMultiple || Model.HasSuperQuery)
{
        @:var entityInfo = @(Model.DbLinkId != "0" ? "_sqlSugarClient" : "_repository.AsSugarClient()").EntityMaintenance.GetEntityInfo<@(Model.ClassName)Entity>();
}
@if(Model.PcDefaultSortConfig)
{
        @:if (_userManager.UserOrigin.Equals("pc"))
        @:{
            @:input.sidx = CodeGenHelper.CodeGenDefaultSort(input.sidx, string.Empty, entityInfo, 0);
            @:input.sort = string.Empty;
        @:}
}
@if(Model.AppDefaultSortConfig)
{
        @:if (!_userManager.UserOrigin.Equals("pc"))
        @:{
            @:input.sidx = CodeGenHelper.CodeGenDefaultSort(input.sidx, string.Empty, entityInfo, 0);
            @:input.sort = string.Empty;
        @:}
}
@if(Model.HasSuperQuery)
{
        @:var superQuery = SuperQueryHelper.GetSuperQueryInput(input.superQueryJson, string.Empty, entityInfo, 0);
        @:List<IConditionalModel> mainConditionalModel = SuperQueryHelper.GetSuperQueryJson(superQuery);
}
@{ GetListQueryFieldTemplate(); }
        @:var data = await @(Model.DbLinkId != "0" ? "_sqlSugarClient.Queryable<" + Model.ClassName + "Entity>()" : "_repository.AsQueryable()")
@{ GetTheListQueryCriteriaTemplate(); }
@if(Model.UseDataPermission)
{
            @:.Where(authorizeWhere)
}
@if(Model.DataRuleJson != null && Model.DataRuleJson != "[]")
{
            @:.Where(dataRuleList.FirstOrDefault()?.conditionalModel)
}
@if(Model.HasSuperQuery)
{
            @:.Where(mainConditionalModel)
}
@if(Model.IsLogicalDelete)
{
            @:.Where(it => it.DeleteMark == null)
}
@if(Model.EnableFlow)
{
            @:.Where(it => flowIdList.Contains(it.FlowId))
}else{
            @:.Where(it => it.FlowId==null)
}
            @:.Select(it => new @(Model.ClassName)ListOutput
            @:{
@{ GetTheListDisplayFieldTemplate(); }
            @:}).MergeTable().OrderByIF(string.IsNullOrEmpty(input.sidx), it => it.@(Model.LowerPrimaryKey)).OrderByIF(!string.IsNullOrEmpty(input.sidx), input.sidx + " " + input.sort).ToPagedListAsync(input.currentPage, input.pageSize);
@:
        @:var inlineEditorList = data.list.Adapt<List<@(Model.ClassName)InlineEditorOutput>>();
@if(Model.IsConversion)
{
@:
        @:await _repository.AsSugarClient().ThenMapperAsync(inlineEditorList, async item =>
        @:{
            @:var linkageParameters = new List<DataInterfaceParameter>();
@{ GetListDataConversionTemplate(); }
        @:});
}
@if(Model.ParsJnpfKeyConstList.Count > 0)
{
@:
        @:var resData = inlineEditorList.ToObject<List<Dictionary<string, object>>>(CommonConst.options);
        @:List<FieldsModel> fieldList = new List<FieldsModel>();
        @:fieldList.AddRange(ExportImportDataHelper.GetDataConversionTemplateParsing<@(Model.ClassName)Entity>(new @(Model.ClassName)Entity()));
@foreach (var jnpfKeyConst in Model.ParsJnpfKeyConstList)
{
        @:resData = await _controlParsing.GetParsDataList(resData, "@(jnpfKeyConst[1])", "@(jnpfKeyConst[0])", _userManager.TenantId, fieldList);
}
@:
        @:inlineEditorList = resData.ToObject<List<@(Model.ClassName)InlineEditorOutput>>(CommonConst.options);
}
@:
        @:return PageResult<@(Model.ClassName)InlineEditorOutput>.SqlSugarPageResult(new SqlSugarPagedList<@(Model.ClassName)InlineEditorOutput>
        @:{
            @:pagination = data.pagination,
            @:list = inlineEditorList
        @:});
    @:}
break;
@*无分页列表*@
case "noPage":
@:
    @:/// <summary>
    @:/// 获取@(Model.BusName)无分页列表.
    @:/// </summary>
    @:/// <param name="input">请求参数.</param>
    @:/// <returns></returns>
@if(item.IsInterface)
{
    @:[HttpPost("List")]
}
    @:@(item.IsInterface ? "public" : "private") async Task<dynamic> GetNoPagingList(@(item.IsInterface ? "[FromBody] " : "")@(Model.ClassName)ListQueryInput input)
    @:{
@if(Model.DbLinkId != "0")
{
        @:var dbLink = await _repository.AsSugarClient().Queryable<DbLinkEntity>().FirstAsync(it => it.Id.Equals("@(Model.DbLinkId)"));
        @:_sqlSugarClient = _dataBaseManager.ChangeDataBase(dbLink);
@:
}
@if(Model.EnableFlow)
{
        @:var flowIdList = await _controlParsing.GetFlowIdListByTemplateId(input.flowId);
}
@if(Model.UseDataPermission)
{
        @:var authorizeWhere = new List<IConditionalModel>();
@:
        @:// 数据权限过滤
        @:if (_userManager.User.IsAdministrator == 0)
        @:{
            @:authorizeWhere = await _userManager.GetConditionAsync<@(Model.ClassName)ListOutput>(input.menuId, "@(Model.OriginalPrimaryKey)", _userManager.UserOrigin.Equals("pc") ? @(Model.PcUseDataPermission) : @(Model.AppUseDataPermission), @(Model.PrimaryKeyPolicy));
        @:}
@:
}
@if(Model.IsSearchMultiple || Model.HasSuperQuery)
{
        @:var entityInfo = @(Model.DbLinkId != "0" ? "_sqlSugarClient" : "_repository.AsSugarClient()").EntityMaintenance.GetEntityInfo<@(Model.ClassName)Entity>();
}
@if(Model.PcDefaultSortConfig)
{
        @:if (_userManager.UserOrigin.Equals("pc"))
        @:{
            @:input.sidx = CodeGenHelper.CodeGenDefaultSort(input.sidx, string.Empty, entityInfo, 0);
            @:input.sort = string.Empty;
        @:}
}
@if(Model.AppDefaultSortConfig)
{
        @:if (!_userManager.UserOrigin.Equals("pc"))
        @:{
            @:input.sidx = CodeGenHelper.CodeGenDefaultSort(input.sidx, string.Empty, entityInfo, 0);
            @:input.sort = string.Empty;
        @:}
}
@if(Model.HasSuperQuery)
{
        @:var superQuery = SuperQueryHelper.GetSuperQueryInput(input.superQueryJson, string.Empty, entityInfo, 0);
        @:List<IConditionalModel> mainConditionalModel = SuperQueryHelper.GetSuperQueryJson(superQuery);
}
@{ GetListQueryFieldTemplate(); }
        @:var list = await @(Model.DbLinkId != "0" ? "_sqlSugarClient.Queryable<" + Model.ClassName + "Entity>()" : "_repository.AsQueryable()")
@{ GetTheListQueryCriteriaTemplate(); }
@if(Model.UseDataPermission)
{
            @:.Where(authorizeWhere)
}
@if(Model.DataRuleJson != null && Model.DataRuleJson != "[]")
{
            @:.Where(dataRuleList.FirstOrDefault()?.conditionalModel)
}
@if(Model.HasSuperQuery)
{
            @:.Where(mainConditionalModel)
}
@if(Model.IsLogicalDelete)
{
            @:.Where(it => it.DeleteMark == null)
}
@if(Model.EnableFlow)
{
            @:.Where(it => flowIdList.Contains(it.FlowId))
}else{
            @:.Where(it => it.FlowId==null)
}
            @:.Select(it => new @(Model.ClassName)ListOutput
            @:{
@{ GetTheListDisplayFieldTemplate(); }
            @:}).MergeTable().OrderByIF(string.IsNullOrEmpty(input.sidx), it => it.@(Model.LowerPrimaryKey)).OrderByIF(!string.IsNullOrEmpty(input.sidx), input.sidx + " " + input.sort).ToListAsync();
@:
        @:var inlineEditorList = list.Adapt<List<@(Model.ClassName)InlineEditorOutput>>();
@if(Model.IsConversion)
{
@:
        @:await _repository.AsSugarClient().ThenMapperAsync(inlineEditorList, async item =>
        @:{
            @:var linkageParameters = new List<DataInterfaceParameter>();
@{ GetListDataConversionTemplate(); }
        @:});
}
@if(Model.ParsJnpfKeyConstList.Count>0)
{
@:
        @:var resData = inlineEditorList.ToObject<List<Dictionary<string, object>>>(CommonConst.options);
        @:List<FieldsModel> fieldList = new List<FieldsModel>();
        @:fieldList.AddRange(ExportImportDataHelper.GetDataConversionTemplateParsing<@(Model.ClassName)Entity>(new @(Model.ClassName)Entity()));
@foreach (var jnpfKeyConst in Model.ParsJnpfKeyConstList)
{
        @:resData = await _controlParsing.GetParsDataList(resData,"@(jnpfKeyConst[1])","@(jnpfKeyConst[0])",_userManager.TenantId, fieldList);
}
@:
        @:inlineEditorList = resData.ToObject<List<@(Model.ClassName)InlineEditorOutput>>(CommonConst.options);
}
        @:return inlineEditorList;
    @:}
break;
@*新增*@
case "add":
@:
    @:/// <summary>
    @:/// 新建@(Model.BusName).
    @:/// </summary>
    @:/// <param name="input">参数.</param>
    @:/// <returns></returns>
    @:[HttpPost("")]
    @:public async Task Create([FromBody] @(Model.ClassName)CrInput input)
    @:{
        @:input = CodeGenHelper.SetEmptyStringNull(input);
@*跨库*@
@if(Model.DbLinkId != "0")
{
        @:var dbLink = await _repository.AsSugarClient().Queryable<DbLinkEntity>().FirstAsync(it => it.Id.Equals("@(Model.DbLinkId)"));
        @:_sqlSugarClient = _dataBaseManager.ChangeDataBase(dbLink);
@:
}
        @:var entity = input.Adapt<@(Model.ClassName)Entity>();
@if(Model.PrimaryKeyPolicy == 1)
{
        @:entity.@(Model.PrimaryKey) = SnowflakeIdHelper.NextId();
}
@{ GetTheNewDataMethodTemplate(); }
        @:if (!(isOk > 0)) throw Oops.Oh(ErrorCode.COM1000);
    @:}
break;
@*编辑*@
case "edit":
@:
    @:/// <summary>
    @:/// 更新@(Model.BusName).
    @:/// </summary>
    @:/// <param name="id">主键值.</param>
    @:/// <param name="input">参数.</param>
    @:/// <returns></returns>
    @:[HttpPut("{id}")]
    @:public async Task Update(@(Model.PrimaryKeyPolicy == 1 ? "string" : "long") id, [FromBody] @(Model.ClassName)UpInput input)
    @:{
        @:input = CodeGenHelper.SetEmptyStringNull(input);
@*跨库*@
@if(Model.DbLinkId != "0")
{
        @:var dbLink = await _repository.AsSugarClient().Queryable<DbLinkEntity>().FirstAsync(it => it.Id.Equals("@(Model.DbLinkId)"));
        @:_sqlSugarClient = _dataBaseManager.ChangeDataBase(dbLink);
@:
}
        @:var entity = input.Adapt<@(Model.ClassName)Entity>();
@{ GetAndModifyDataMethodTemplate(); }
        @:if (!(isOk > 0)) throw Oops.Oh(ErrorCode.COM1001);
    @:}
break;
@*删除*@
case "remove":
@:
    @:/// <summary>
    @:/// 删除@(Model.BusName).
    @:/// </summary>
    @:/// <returns></returns>
    @:[HttpDelete("{id}")]
    @:public async Task Delete(@(Model.PrimaryKeyPolicy == 1 ? "string" : "long") id)
    @:{
@*跨库*@
@if(Model.DbLinkId != "0")
{
        @:var dbLink = await _repository.AsSugarClient().Queryable<DbLinkEntity>().FirstAsync(it => it.Id.Equals("@(Model.DbLinkId)"));
        @:_sqlSugarClient = _dataBaseManager.ChangeDataBase(dbLink);
@:
}
        @:var isOk = await @(Model.DbLinkId != "0" ? "_sqlSugarClient.Deleteable<" + Model.ClassName + "Entity>()" : "_repository.AsDeleteable()").Where(it => it.@(Model.PrimaryKey).Equals(id))@(Model.IsLogicalDelete ? ".IsLogic()" : "").ExecuteCommandAsync(@(Model.IsLogicalDelete ? "\"F_Delete_Mark\",1, \"F_DELETE_TIME\", \"F_DELETE_USER_ID\", _userManager.UserId" : ""));    
        @:if (!(isOk > 0)) throw Oops.Oh(ErrorCode.COM1002);
    @:}
@*批量删除*@
@:
    @:/// <summary>
    @:/// 批量删除@(Model.BusName).
    @:/// </summary>
    @:/// <param name="input">主键数组.</param>
    @:/// <returns></returns>
    @:[HttpPost("batchRemove")]
    @:[UnitOfWork]
    @:public async Task BatchRemove([FromBody] BatchRemoveInput input)
    @:{
@*跨库*@
@if(Model.DbLinkId != "0")
{
        @:var dbLink = await _repository.AsSugarClient().Queryable<DbLinkEntity>().FirstAsync(it => it.Id.Equals("@(Model.DbLinkId)"));
        @:_sqlSugarClient = _dataBaseManager.ChangeDataBase(dbLink);
@:
}
@if(Model.EnableFlow)
{
        @:var idList = await @(Model.DbLinkId != "0" ? "_sqlSugarClient.Queryable<" + Model.ClassName + "Entity>()" : "_repository.AsQueryable()").Where(it => input.ids.Contains(it.@(Model.PrimaryKey))@(Model.IsLogicalDelete ? "  && it.DeleteMark == null" : "")).Select(it => it.FlowTaskId).ToListAsync();
        @:var removeIds = await _workFlowRepository.DeleteLaunchTask(idList);
        @:await @(Model.DbLinkId != "0" ? "_sqlSugarClient.Deleteable<" + Model.ClassName + "Entity>()" : "_repository.AsDeleteable()").In(it => it.FlowTaskId, removeIds)@(Model.IsLogicalDelete ? ".Where(it => it.DeleteMark == null)" : "")@(Model.IsLogicalDelete ? ".IsLogic()" : "").ExecuteCommandAsync(@(Model.IsLogicalDelete ? "\"F_Delete_Mark\",1, \"F_DELETE_TIME\", \"F_DELETE_USER_ID\", _userManager.UserId" : ""));
}else{
        @:var entitys = await @(Model.DbLinkId != "0" ? "_sqlSugarClient.Queryable<" + Model.ClassName + "Entity>()" : "_repository.AsQueryable()").In(it => it.@(Model.PrimaryKey), input.ids)@(Model.IsLogicalDelete ? ".Where(it => it.DeleteMark == null)" : "").ToListAsync();
        @:if (entitys.Count > 0)
        @:{
            @:// 批量删除@(Model.BusName)
            @:await @(Model.DbLinkId != "0" ? "_sqlSugarClient.Deleteable<" + Model.ClassName + "Entity>()" : "_repository.AsDeleteable()").In(it => it.@(Model.PrimaryKey),input.ids)@(Model.IsLogicalDelete ? ".Where(it => it.DeleteMark == null)" : "")@(Model.IsLogicalDelete ? ".IsLogic()" : "").ExecuteCommandAsync(@(Model.IsLogicalDelete ? "\"F_Delete_Mark\",1, \"F_DELETE_TIME\", \"F_DELETE_USER_ID\", _userManager.UserId" : ""));
        @:}
}
    @:}
break;
@*导出*@
case "download":
@:
    @:/// <summary>
    @:/// 导出@(Model.BusName).
    @:/// </summary>
    @:/// <param name="input">请求参数.</param>
    @:/// <returns></returns>
    @:[HttpPost("Actions/Export")]
    @:public async Task<dynamic> Export([FromBody] @(Model.ClassName)ListQueryInput input)
    @:{
@if(Model.TableType == 3)
{
        @:var exportData = new List<Dictionary<string, object>>();
        @:if (input.dataType == 0)
            @:exportData = await GetList(input);
        @:else
            @:exportData = await GetNoPagingList(input);
}else{
        @:var exportData = new List<@(Model.ClassName)InlineEditorOutput>();
        @:if (input.dataType == 0)
            @:exportData = Clay.Object(await GetList(input)).Solidify<PageResult<@(Model.ClassName)InlineEditorOutput>>().list;
        @:else
            @:exportData = await GetNoPagingList(input);
}
        @:var excelName = string.Format("{0}_{1:yyyyMMddHHmmss}", _controlParsing.GetModuleNameById(input.menuId), DateTime.Now);
        @:_cacheManager.Set(excelName + ".xls", string.Empty);
        @:return ExportImportDataHelper.GetDataExport(excelName,input.selectKey, _userManager.UserId,exportData.ToJsonString().ToObjectOld<List<Dictionary<string, object>>>(), paramList, @((Model.TableType == 3).ToString().ToLower()), @((Model.TableType == 4).ToString().ToLower()));
    @:}
break;
@*导入*@
case "upload":
@:
    @:/// <summary>
    @:/// 下载模板.
    @:/// </summary>
    @:/// <returns></returns>
    @:[HttpGet("TemplateDownload")]
    @:public async Task<dynamic> TemplateDownload(string menuId)
    @:{
        @:List<FieldsModel> fieldList = new List<FieldsModel>();
        @:fieldList.AddRange(ExportImportDataHelper.GetDataConversionTemplateParsing<@(Model.ClassName)Entity>(new @(Model.ClassName)Entity()));
        @:List<Dictionary<string, object>>? dataList = new List<Dictionary<string, object>>();
@:
        @:// 赋予默认值
        @:var dicItem = ExportImportDataHelper.GetTemplateHeader<@(Model.ClassName)Entity>(new @(Model.ClassName)Entity(), 1);
@:
        @:dicItem.Add("id", "id");
        @:dataList.Add(dicItem);
@:
        @:var excelName = string.Format("{0}导入模板", _controlParsing.GetModuleNameById(menuId));
        @:_cacheManager.Set(excelName + ".xls", string.Empty);
        @:return _exportImportDataHelper.GetTemplateExport(excelName, string.Join(",", uploaderKey), _userManager.UserId, dataList, fieldList, paramList);
    @:}
@:
    @:/// <summary>
    @:/// Excel导入.
    @:/// </summary>
    @:/// <param name="file"></param>
    @:/// <returns></returns>
    @:[HttpPost("Uploader")]
    @:public async Task<dynamic> Uploader(IFormFile file)
    @:{
        @:var _filePath = _fileManager.GetPathByType(string.Empty);
        @:var _fileName = DateTime.Now.ToString("yyyyMMdd") + "_" + SnowflakeIdHelper.NextId() + Path.GetExtension(file.FileName);
        @:var stream = file.OpenReadStream();
        @:await _fileManager.UploadFileByType(stream, _filePath, _fileName);
        @:return new { name = _fileName, url = string.Format("/api/File/Image/{0}/{1}", string.Empty, _fileName) };
    @:}
@:
    @:/// <summary>
    @:/// 导入预览.
    @:/// </summary>
    @:/// <returns></returns>
    @:[HttpGet("ImportPreview")]
    @:public async Task<dynamic> ImportPreview(string fileName)
    @:{
        @:List<FieldsModel> fieldList = new List<FieldsModel>();
        @:fieldList.AddRange(ExportImportDataHelper.GetTemplateParsing<@(Model.ClassName)Entity>(new @(Model.ClassName)Entity()));
        @:var entityInfo = _repository.AsSugarClient().EntityMaintenance.GetEntityInfo<@(Model.ClassName)Entity>();
        @:List<DbTableRelationModel> tables = new List<DbTableRelationModel>() { ExportImportDataHelper.GetTableRelation(entityInfo, "1") };
        @:DbLinkEntity link = _dataBaseManager.GetTenantDbLink(_userManager.TenantId, _userManager.TenantDbName); // 当前数据库连接
        @:var tInfo = new TemplateParsingBase(link, fieldList, tables, "@(Model.OriginalPrimaryKey)", @(Model.WebType), @(Model.PrimaryKeyPolicy), uploaderKey.ToList(), "@(Model.ImportDataType)"@(Model.EnableFlow ? ", 1, \"" + Model.FormId + "\"" : ""));
        @:return await _exportImportDataHelper.GetImportPreviewData(tInfo, fileName);
    @:}
@:
    @:/// <summary>
    @:/// 导入数据.
    @:/// </summary>
    @:/// <param name="input"></param>
    @:/// <returns></returns>
    @:[HttpPost("ImportData")]
    @:[UnitOfWork]
    @:public async Task<dynamic> ImportData([FromBody] DataImportInput input)
    @:{
        @:List<FieldsModel> fieldList = new List<FieldsModel>();
        @:fieldList.AddRange(ExportImportDataHelper.GetTemplateParsing<@(Model.ClassName)Entity>(new @(Model.ClassName)Entity()));
        @:var entityInfo = _repository.AsSugarClient().EntityMaintenance.GetEntityInfo<@(Model.ClassName)Entity>();
        @:List<DbTableRelationModel> tables = new List<DbTableRelationModel>() { ExportImportDataHelper.GetTableRelation(entityInfo, "1") };
        @:DbLinkEntity link = _dataBaseManager.GetTenantDbLink(_userManager.TenantId, _userManager.TenantDbName); // 当前数据库连接
        @:var tInfo = new TemplateParsingBase(link, fieldList, tables, "@(Model.OriginalPrimaryKey)", @(Model.WebType), @(Model.PrimaryKeyPolicy), uploaderKey.ToList(), "@(Model.ImportDataType)"@(Model.EnableFlow ? ", 1, \"" + Model.FormId + "\"" : ""));
@:
        @:object[]? res = await _exportImportDataHelper.ImportMenuData(tInfo, input @(Model.EnableFlow ? ", \"" + Model.FormId + "\"" : ""));
        @:var addlist = res.First() as List<Dictionary<string, object>>;
        @:var errorlist = res.Last() as List<Dictionary<string, object>>;
        @:var result = new DataImportOutput()
        @:{
            @:snum = addlist.Count,
            @:fnum = errorlist.Count,
            @:failResult = errorlist,
            @:resultType = errorlist.Count < 1 ? 0 : 1
        @:};
@:
        @:return result;
    @:}
@:
    @:/// <summary>
    @:/// 导入数据的错误报告.
    @:/// </summary>
    @:/// <param name="list"></param>
    @:/// <returns></returns>
    @:[HttpPost("ImportExceptionData")]
    @:[UnitOfWork]
    @:public async Task<dynamic> ExportExceptionData([FromBody] DataImportInput list)
    @:{
        @:List<FieldsModel> fieldList = new List<FieldsModel>();
        @:fieldList.AddRange(ExportImportDataHelper.GetTemplateParsing<@(Model.ClassName)Entity>(new @(Model.ClassName)Entity()));
        @:var entityInfo = _repository.AsSugarClient().EntityMaintenance.GetEntityInfo<@(Model.ClassName)Entity>();
        @:List<DbTableRelationModel> tables = new List<DbTableRelationModel>() { ExportImportDataHelper.GetTableRelation(entityInfo, "1") };
        @:DbLinkEntity link = _dataBaseManager.GetTenantDbLink(_userManager.TenantId, _userManager.TenantDbName); // 当前数据库连接
        @:var tInfo = new TemplateParsingBase(link, fieldList, tables, "@(Model.OriginalPrimaryKey)", @(Model.WebType), @(Model.PrimaryKeyPolicy), uploaderKey.ToList(), "@(Model.ImportDataType)");
        @:tInfo.FullName = _controlParsing.GetModuleNameById(list.menuId);
@:
        @:// 错误数据
        @:tInfo.selectKey.Add("errorsInfo");
        @:tInfo.AllFieldsModel.Add(new FieldsModel() { __vModel__ = "errorsInfo", __config__ = new ConfigModel() { label = "异常原因" } });
        @:for (var i = 0; i < list.list.Count(); i++) list.list[i].Add("id", i);
@:
        @:var result = ExportImportDataHelper.GetCreateFirstColumnsHeader(tInfo.selectKey, list.list, paramList);
        @:var firstColumns = result.Item1;
        @:var resultList = result.Item2;
        @:var fName = string.Format("{0}错误报告{1:yyyyMMddHHmmss}", tInfo.FullName, DateTime.Now);
        @:_cacheManager.Set(fName + ".xls", string.Empty);
        @:return firstColumns.Any()
            @:? await _exportImportDataHelper.ExcelCreateModel(tInfo, resultList, fName, firstColumns)
            @:: await _exportImportDataHelper.ExcelCreateModel(tInfo, resultList, fName);
    @:}
break;
}
}
}
@{
@*获取列表查询字段模板*@
    void GetListQueryFieldTemplate()
    {
        @:var selectIds = input.selectIds?.Split(",").@(Model.PrimaryKeyPolicy==2 ? "ToObject<List<long?>>" : "ToList")();
@foreach(var table in Model.TableField)
{
@*是查询条件*@
@if(table.QueryWhether)
{
@switch(table.QueryType)
{
case 1:
@switch(table.jnpfKey)
{
case "select":
case "depSelect":
case "roleSelect":
case "userSelect":
case "posSelect":
case "groupSelect":
@if(table.QueryMultiple)
{
        @:var @(table.LowerColumnName)DbColumnName = entityInfo.Columns.Find(it => it.PropertyName == "@(table.ColumnName)").DbColumnName;
}
break;
case "usersSelect":
        @:var @(table.LowerColumnName)UsersSelectWhere = _controlParsing.GetUsersSelectQueryWhere("@(table.OriginalColumnName)", input.@(table.LowerColumnName));
break;
case "organizeSelect":
@if(table.QueryMultiple)
{
        @:var @(table.LowerColumnName) = input.@(table.LowerColumnName).ParseToNestedList();
        @:var @(table.LowerColumnName)DbColumnName = entityInfo.Columns.Find(it => it.PropertyName == "@(table.ColumnName)").DbColumnName;
}else{
        @:var @(table.LowerColumnName) = input.@(table.LowerColumnName)?.Last();
}
break;
case "cascader":
case "areaSelect":
        @:var @(table.LowerColumnName) = input.@(table.LowerColumnName)?.Last();
break;
default:
@if(table.IsMultiple)
{
        @:var @(table.LowerColumnName) = input.@(table.LowerColumnName)?.Last();
}
break;
}
break;
case 3:
@switch(table.jnpfKey)
{
case "inputNumber":
case "calculate":
case "rate":
case "slider":
        @:var start@(table.ColumnName) = input.@(table.LowerColumnName)?.FirstOrDefault()?.ParseToDecimal() == null ? decimal.MinValue : input.@(table.LowerColumnName)?.First();
        @:var end@(table.ColumnName) = input.@(table.LowerColumnName)?.LastOrDefault()?.ParseToDecimal() == null ? decimal.MaxValue : input.@(table.LowerColumnName)?.Last();
break;
}
break;
}
}
}
    }
@*获取列表查询条件模板*@
    void GetTheListQueryCriteriaTemplate()
    {
            @:.WhereIF(selectIds!=null && selectIds.Any() && input.dataType.Equals(2), it => selectIds.Contains(it.@(Model.PrimaryKey)))
@if(Model.PcKeywordSearchColumn!="")
{
            @:.WhereIF(_userManager.UserOrigin.Equals("pc") && input.jnpfKeyword.IsNotEmptyOrNull(), it => @(Model.PcKeywordSearchColumn))
}
@if(Model.AppKeywordSearchColumn!="")
{
            @:.WhereIF(!_userManager.UserOrigin.Equals("pc") && input.jnpfKeyword.IsNotEmptyOrNull(), it => @(Model.AppKeywordSearchColumn))
}
@*循环查询条件*@
@foreach(var table in Model.TableField)
{
@*是否查询条件*@
@if(table.QueryWhether)
{
@*查询方式*@
@switch(table.QueryType)
{
@*查询方式为等于*@
case 1:
@*多选控件*@
@if(table.QueryMultiple)
{
@switch(table.jnpfKey)
{
case "organizeSelect":
            @:.Where(_controlParsing.GenerateMultipleSelectionCriteriaForQuerying(@(table.LowerColumnName)DbColumnName, @(table.LowerColumnName)))
break;
case "usersSelect":
            @:.Where(@(table.LowerColumnName)UsersSelectWhere)
break;
default:
            @:.Where(_controlParsing.GenerateMultipleSelectionCriteriaForQuerying(@(table.LowerColumnName)DbColumnName, input.@(table.LowerColumnName)))
break;
}
}else{
@switch(table.jnpfKey)
{
case "currOrganize":
            @:.WhereIF(!string.IsNullOrEmpty(input.@(table.LowerColumnName)?.ToString()), it => it.@(table.ColumnName).Equals(input.@(table.LowerColumnName).ToJsonString()))
break;
case "cascader":
case "areaSelect":
case "organizeSelect":
            @:.WhereIF(!string.IsNullOrEmpty(input.@(table.LowerColumnName)?.ToString()), it => it.@(table.ColumnName).Contains(@(table.LowerColumnName)))
break;
case "checkbox":
            @:.WhereIF(!string.IsNullOrEmpty(input.@(table.LowerColumnName)), it => it.@(table.ColumnName).Contains(input.@(table.LowerColumnName)))
break;
case "usersSelect":
            @:.Where(_controlParsing.GetUsersSelectQueryWhere("@(table.OriginalColumnName)", input.@(table.LowerColumnName), @(table.IsMultiple.ToString().ToLower())))
break;
default:
            @:.WhereIF(!string.IsNullOrEmpty(input.@(table.LowerColumnName)), it => it.@(table.ColumnName).Equals(input.@(table.LowerColumnName)))
break;
}
}
break;
@*查询类型为模糊查询*@
case 2:
            @:.WhereIF(!string.IsNullOrEmpty(input.@(table.LowerColumnName)), it => it.@(table.ColumnName).Contains(input.@(table.LowerColumnName)))
break;
@*查询类型为范围查询*@
case 3:
@switch(table.jnpfKey)
{
case "timePicker":
            @:.WhereIF(input.@(table.LowerColumnName)?.Count() > 0, it => SqlFunc.Between(it.@(table.ColumnName), input.@(table.LowerColumnName).First(), input.@(table.LowerColumnName).Last()))
break;
case "inputNumber":
case "calculate":
case "rate":
case "slider":
            @:.WhereIF(input.@(table.LowerColumnName)?.Count() > 0, it => SqlFunc.Between(it.@(table.ColumnName), start@(table.ColumnName), end@(table.ColumnName)))
break;
case "createTime":
case "modifyTime":
            @:.WhereIF(input.@(table.LowerColumnName)?.Count() > 0, it => SqlFunc.Between(it.@(table.ColumnName), input.@(table.LowerColumnName).First().ParseToDateTime("yyyy-MM-dd HH:mm:ss"), input.@(table.LowerColumnName).Last().ParseToDateTime("yyyy-MM-dd HH:mm:ss")))
break;
default:
@if(table.IsDateTime)
{
            @:.WhereIF(input.@(table.LowerColumnName)?.Count() > 0, it => SqlFunc.Between(it.@(table.ColumnName), input.@(table.LowerColumnName).First().ParseToDateTime("yyyy-MM-dd HH:mm:ss"), input.@(table.LowerColumnName).Last().ParseToDateTime("yyyy-MM-dd HH:mm:ss")))
}else{
            @:.WhereIF(input.@(table.LowerColumnName)?.Count() > 0, it => SqlFunc.Between(it.@(table.ColumnName), input.@(table.LowerColumnName).First().ParseToDateTime("yyyy-MM-dd 00:00:00"), input.@(table.LowerColumnName).Last().ParseToDateTime("yyyy-MM-dd 23:59:59")))
}
break;
}
break;
}
}
}
    }
@*获取列表展示字段模板*@
    void GetTheListDisplayFieldTemplate()
    {
@*循环展示字段*@
@foreach (var column in Model.TableField){
@if (column.PrimaryKey){
                @:@(column.LowerColumnName) = it.@column.ColumnName,
        @if (column.LowerColumnName!="id"){
                @:id = it.@column.ColumnName,
        }
}else if(column.IsShow){
@switch(column.jnpfKey)
{
case "datePicker":
                @:@(column.LowerColumnName) = it.@(column.ColumnName),
                @:@(column.LowerColumnName)_name = it.@(column.ColumnName).Value.ToString("@(column.Format)"),
break;
case "createTime":
case "modifyTime":
                @:@(column.LowerColumnName) = it.@(column.ColumnName).Value.ToString("yyyy-MM-dd HH:mm:ss"),
                @:@(column.LowerColumnName)_name = it.@(column.ColumnName).Value.ToString("yyyy-MM-dd HH:mm:ss"),
break;
case "switch":
                @:@(column.LowerColumnName) = SqlFunc.ToInt32(it.@(column.ColumnName)),
                @:@(column.LowerColumnName)_name = SqlFunc.IIF(SqlFunc.ToInt32(it.@(column.ColumnName)) == 1, "@(column.ActiveTxt)", "@(column.InactiveTxt)"),
break;
case "modifyUser":
case "createUser":
                @:@(column.LowerColumnName) = it.@column.ColumnName,
                @:@(column.LowerColumnName)_name = SqlFunc.Subqueryable<UserEntity>()@(Model.DbLinkId != "0" ? ".AS(\"" + Model.DefaultDbName + ".BASE_USER\")" : "").EnableTableFilter().Where(u => u.Id.Equals(it.@(column.ColumnName))).Select(u => SqlFunc.MergeString(u.RealName, "/", u.Account)),
break;
case "currPosition":
                @:@(column.LowerColumnName) = SqlFunc.Subqueryable<PositionEntity>()@(Model.DbLinkId != "0" ? ".AS(\""+ Model.DefaultDbName +".BASE_POSITION\")" : "").EnableTableFilter().Where(p => p.Id.Equals(it.@(column.ColumnName))).Select(p => p.FullName),
                @:@(column.LowerColumnName)_name = SqlFunc.Subqueryable<PositionEntity>()@(Model.DbLinkId != "0" ? ".AS(\""+ Model.DefaultDbName +".BASE_POSITION\")" : "").EnableTableFilter().Where(p => p.Id.Equals(it.@(column.ColumnName))).Select(p => p.FullName),
break;
case "userSelect":
                @:@(column.LowerColumnName) = it.@(column.ColumnName),
@if(!column.IsMultiple)
{
                @:@(column.LowerColumnName)_name = SqlFunc.Subqueryable<UserEntity>()@(Model.DbLinkId != "0" ? ".AS(\""+ Model.DefaultDbName +".BASE_USER\")" : "").EnableTableFilter().Where(u => u.Id.Equals(it.@(column.ColumnName))).Select(u => u.RealName),
}
break;
case "posSelect":
                @:@(column.LowerColumnName) = it.@(column.ColumnName),
@if(!column.IsMultiple)
{
                @:@(column.LowerColumnName)_name = SqlFunc.Subqueryable<PositionEntity>()@(Model.DbLinkId != "0" ? ".AS(\""+ Model.DefaultDbName +".BASE_POSITION\")" : "").EnableTableFilter().Where(p => p.Id.Equals(it.@(column.ColumnName))).Select(p => p.FullName),
}
break;
case "depSelect":
                @:@(column.LowerColumnName) = it.@column.ColumnName,
@if(!column.IsMultiple)
{
                @:@(column.LowerColumnName)_name = SqlFunc.Subqueryable<OrganizeEntity>()@(Model.DbLinkId != "0" ? ".AS(\""+ Model.DefaultDbName +".BASE_ORGANIZE\")" : "").EnableTableFilter().Where(o => o.Id.Equals(it.@(column.ColumnName))).Select(o => o.FullName),
}
break;
case "roleSelect":
                @:@(column.LowerColumnName) = it.@(column.ColumnName),
@if(!column.IsMultiple)
{
                @:@(column.LowerColumnName)_name = SqlFunc.Subqueryable<RoleEntity>()@(Model.DbLinkId != "0" ? ".AS(\""+ Model.DefaultDbName +".BASE_ROLE\")" : "").EnableTableFilter().Where(r => r.Id.Equals(it.@(column.ColumnName))).Select(r => r.FullName),
}
break;
case "groupSelect":
                @:@(column.LowerColumnName) = it.@(column.ColumnName),
@if(!column.IsMultiple)
{
                @:@(column.LowerColumnName)_name = SqlFunc.Subqueryable<GroupEntity>()@(Model.DbLinkId != "0" ? ".AS(\""+ Model.DefaultDbName +".BASE_GROUP\")" : "").EnableTableFilter().Where(g => g.Id.Equals(it.@(column.ColumnName))).Select(g => g.FullName),
}
break;
case "select":
case "radio":
case "treeSelect":
                @:@(column.LowerColumnName) = it.@column.ColumnName,
@switch(column.ControlsDataType)
{
case "dictionary":
@if(!column.IsMultiple)
{
                @:@(column.LowerColumnName)_name = SqlFunc.Subqueryable<DictionaryDataEntity>()@(Model.DbLinkId != "0" ? ".AS(\""+ Model.DefaultDbName +".BASE_DICTIONARYDATA\")" : "").EnableTableFilter().Where(dic => dic.@(column.Value == "id" ? "Id" : "EnCode").Equals(it.@(column.ColumnName)) && dic.DictionaryTypeId.Equals("@(column.propsUrl)")).Select(dic => dic.FullName),
}
break;
}
break;
case "timePicker":
case "input":
case "sign":
case "signature":
case "textarea":
case "popupSelect":
case "relationForm":
case "inputNumber":
case "rate":
case "slider":
case "billRule":
case "usersSelect":
case "autoComplete":
                @:@(column.LowerColumnName) = it.@column.ColumnName,
                @:@(column.LowerColumnName)_name = it.@column.ColumnName,
break;
case "popupAttr":
case "relationFormAttr":
@switch(column.isStorage)
{
case true:
                @:@(column.LowerColumnName) = it.@column.ColumnName,
                @:@(column.LowerColumnName)_name = it.@column.ColumnName,
break;
}
break;
default:
                @:@(column.LowerColumnName) = it.@column.ColumnName,
break;
}
}
}
@if(Model.EnableFlow)
{
                @:flowId = it.FlowId,
                @:flowTaskId = it.FlowTaskId,
                @:flowState = SqlFunc.Subqueryable<WorkFlowTaskEntity>()@(Model.DbLinkId != "0" ? ".AS(\""+ Model.DefaultDbName +".FLOW_TASK\")" : "").EnableTableFilter().Where(f => f.Id.Equals(it.FlowTaskId)).Select(f => f.Status),
}
    }
@*获取列表数据转换模板*@
    void GetListDataConversionTemplate()
    {
@foreach (var column in Model.TableField)
{
@{var dataCount = column.StaticData != null ? column.StaticData.Count : 0;}
@if(column.IsConversion && column.IsShow)
{
@switch(column.jnpfKey)
{
case "location":
            @:if(item.@(column.LowerColumnName).IsNotEmptyOrNull()) item.@(column.LowerColumnName)_name = item.@(column.LowerColumnName).ToObject<Dictionary<string, string>>()["fullAddress"];
@:
break;
case "uploadFile":
case "uploadImg":
            @:if(item.@(column.LowerColumnName) != null)
            @:{
                @:item.@(column.LowerColumnName)_name = item.@(column.LowerColumnName).ToString().ToObject<List<FileControlsModel>>();
                @:item.@(column.LowerColumnName) = item.@(column.LowerColumnName)_name;
            @:}
            @:else
            @:{
                @:item.@(column.LowerColumnName)_name = new List<FileControlsModel>();
                @:item.@(column.LowerColumnName) = item.@(column.LowerColumnName)_name;
            @:}
@:
break;
case "select":
            @:// @column.ColumnComment
@switch(column.ControlsDataType)
{
case "static":
            @:var @(column.LowerColumnName)Data = "[@foreach(var data in column.StaticData){@("{\\\"id\\\":\\\"" + @data.id + "\\\",\\\"fullName\\\":\\\""+ @data.fullName + "\\\"}")@(dataCount == 1 ? "" : ",")dataCount--;}]".ToObject<List<StaticDataModel>>();
@if(!column.IsMultiple)
{
            @:if (item.@(column.LowerColumnName) != null)
            @:{
                @:item.@(column.LowerColumnName)_name = @(column.LowerColumnName)Data.Find(it => item.@(column.LowerColumnName).Equals(it.id))?.fullName;
}else{
            @:if (item.@(column.LowerColumnName).Count > 0)
            @:{
                @:item.@(column.LowerColumnName)_name = string.Join(",", @(column.LowerColumnName)Data.FindAll(it => item.@(column.LowerColumnName).Contains(it.id)).Select(it => it.fullName));
}
            @:}
break;
case "dictionary":
@if(column.IsMultiple)
{
            @:if (item.@(column.LowerColumnName).Count > 0)
            @:{
                @:item.@(column.LowerColumnName)_name = string.Join(",", await _repository.AsSugarClient().Queryable<DictionaryDataEntity>().Where(it => item.@(column.LowerColumnName).Contains(it.@(column.Value == "id" ? "Id" : "EnCode")) && it.DictionaryTypeId.Equals("@(column.propsUrl)")).Select(it => it.FullName).ToListAsync());
            @:}
}
break;
case "dynamic":
@if(column.IsLinkage)
{
                @:linkageParameters = new List<DataInterfaceParameter>();
@foreach(var linkage in column.LinkageConfig)
{
                @:linkageParameters.Add(new DataInterfaceParameter
                @:{
                    @:field = "@(linkage.field)",
                    @:relationField = @(linkage.sourceType==1 && linkage.relationField!="string.Empty" ? "item."+linkage.relationField : linkage.relationField),
                    @:isSubTable = @(linkage.isSubTable.ToString().ToLower()),
                    @:dataType = "@(linkage.dataType)",
                    @:defaultValue = "@(linkage.defaultValue)",
                    @:fieldName = "@(linkage.fieldName)",
                    @:sourceType = @(linkage.sourceType)
                @:});
}
}
            @:var @(column.LowerColumnName)Data = await _dataInterfaceService.GetDynamicList("@(column.LowerColumnName)", "@(column.propsUrl)", "@(column.Value)", "@(column.Label)", ""@(column.IsLinkage ? ", linkageParameters" : ""));
@if(!column.IsMultiple)
{
            @:if(item.@(column.LowerColumnName) != null)
            @:{
                @:item.@(column.LowerColumnName)_name = @(column.LowerColumnName)Data.Find(it => it.id.Equals(item.@(column.LowerColumnName)))?.fullName;
}else{
            @:if(item.@(column.LowerColumnName).Count > 0)
            @:{
                @:item.@(column.LowerColumnName)_name = string.Join(",", @(column.LowerColumnName)Data.FindAll(it => item.@(column.LowerColumnName).Contains(it.id)).Select(it => it.fullName));
}
            @:}
break;
}
@:
break;
case "checkbox":
            @:// @column.ColumnComment
@switch(column.ControlsDataType)
{
case "static":
            @:var @(column.LowerColumnName)Data = "[@foreach(var data in column.StaticData){@("{\\\"id\\\":\\\"" + @data.id + "\\\",\\\"fullName\\\":\\\""+ @data.fullName + "\\\"}")@(dataCount == 1 ? "" : ",")dataCount--;}]".ToObject<List<StaticDataModel>>();
            @:if(item.@(column.LowerColumnName).Count > 0)
            @:{
                @:item.@(column.LowerColumnName)_name = string.Join(",", @(column.LowerColumnName)Data.FindAll(it => item.@(column.LowerColumnName).Contains(it.id)).Select(it => it.fullName));
            @:}
break;
case "dictionary":
            @:if(item.@(column.LowerColumnName).Count > 0)
            @:{
                @:item.@(column.LowerColumnName)_name = string.Join(",", await _repository.AsSugarClient().Queryable<DictionaryDataEntity>().Where(it => item.@(column.LowerColumnName).Contains(it.@(column.Value == "id" ? "Id" : "EnCode")) && it.DictionaryTypeId.Equals("@(column.propsUrl)")).Select(it => it.FullName).ToListAsync());
            @:}
break;
case "dynamic":
@if(column.IsLinkage)
{
                @:linkageParameters = new List<DataInterfaceParameter>();
@foreach(var linkage in column.LinkageConfig)
{
                @:linkageParameters.Add(new DataInterfaceParameter
                @:{
                    @:field = "@(linkage.field)",
                    @:relationField = @(linkage.sourceType==1 && linkage.relationField!="string.Empty" ? "item."+linkage.relationField : linkage.relationField),
                    @:isSubTable = @(linkage.isSubTable.ToString().ToLower()),
                    @:dataType = "@(linkage.dataType)",
                    @:defaultValue = "@(linkage.defaultValue)",
                    @:fieldName = "@(linkage.fieldName)",
                    @:sourceType = @(linkage.sourceType)
                @:});
}
}
            @:var @(column.LowerColumnName)Data = await _dataInterfaceService.GetDynamicList("@(column.LowerColumnName)", "@(column.propsUrl)", "@(column.Value)", "@(column.Label)", ""@(column.IsLinkage ? ", linkageParameters" : ""));
            @:if(item.@(column.LowerColumnName).Count > 0)
            @:{
                @:item.@(column.LowerColumnName)_name = string.Join(",", @(column.LowerColumnName)Data.FindAll(it => item.@(column.LowerColumnName).Contains(it.id)).Select(it => it.fullName));
            @:}
break;
}
@:
break;
case "radio":
            @:// @column.ColumnComment
@switch(column.ControlsDataType)
{
case "static":
            @:var @(column.LowerColumnName)Data = "[@foreach(var data in column.StaticData){@("{\\\"id\\\":\\\"" + @data.id + "\\\",\\\"fullName\\\":\\\""+ @data.fullName + "\\\"}")@(dataCount == 1 ? "" : ",")dataCount--;}]".ToObject<List<StaticDataModel>>();
            @:if(item.@(column.LowerColumnName) != null)
            @:{
                @:item.@(column.LowerColumnName)_name = @(column.LowerColumnName)Data.Find(it => item.@(column.LowerColumnName).Equals(it.id))?.fullName;
            @:}
break;
case "dynamic":
@if(column.IsLinkage)
{
                @:linkageParameters = new List<DataInterfaceParameter>();
@foreach(var linkage in column.LinkageConfig)
{
                @:linkageParameters.Add(new DataInterfaceParameter
                @:{
                    @:field = "@(linkage.field)",
                    @:relationField = @(linkage.sourceType==1 && linkage.relationField!="string.Empty" ? "item."+linkage.relationField : linkage.relationField),
                    @:isSubTable = @(linkage.isSubTable.ToString().ToLower()),
                    @:dataType = "@(linkage.dataType)",
                    @:defaultValue = "@(linkage.defaultValue)",
                    @:fieldName = "@(linkage.fieldName)",
                    @:sourceType = @(linkage.sourceType)
                @:});
}
}
            @:var @(column.LowerColumnName)Data = await _dataInterfaceService.GetDynamicList("@(column.LowerColumnName)", "@(column.propsUrl)", "@(column.Value)", "@(column.Label)", "@(column.Children)"@(column.IsLinkage ? ", linkageParameters" : ""));
            @:if(item.@(column.LowerColumnName) != null)
            @:{
                @:item.@(column.LowerColumnName)_name = string.Join(",", @(column.LowerColumnName)Data.Find(it => it.id.Equals(item.@(column.LowerColumnName)))?.fullName);
            @:}
break;
}
@:
break;
case "cascader":
            @:// @column.ColumnComment
@switch(column.ControlsDataType)
{
case "static":
            @:var @(column.LowerColumnName)Data = "[@foreach(var data in column.StaticData){@("{\\\"id\\\":\\\"" + @data.id + "\\\",\\\"fullName\\\":\\\""+ @data.fullName + "\\\"}")@(dataCount == 1 ? "" : ",")dataCount--;}]".ToObject<List<StaticDataModel>>();
@if(!column.IsMultiple)
{
            @:if(item.@(column.LowerColumnName) != null)
            @:{
        @if(column.ShowAllLevels){
                @:item.@(column.LowerColumnName)_name = string.Join("@(column.Separator)", @(column.LowerColumnName)Data.FindAll(it => item.@(column.LowerColumnName).Contains(it.id)).Select(s => s.fullName));
        }else{
                @:item.@(column.LowerColumnName)_name = @(column.LowerColumnName)Data.FindAll(it => item.@(column.LowerColumnName).Contains(it.id)).Select(s => s.fullName).FirstOrDefault();
        }
}else{
            @:if(item.@(column.LowerColumnName).Count > 0)
            @:{
                @:var @(column.LowerColumnName)Excessive = new List<string>();
                @:foreach (var @(column.LowerColumnName) in item.@(column.LowerColumnName))
                @:{
        @if(column.ShowAllLevels){
                    @:@(column.LowerColumnName)Excessive.Add(string.Join("@(column.Separator)", @(column.LowerColumnName)Data.FindAll(it => @(column.LowerColumnName).Contains(it.id)).Select(s => s.fullName)));
        }else{
                    @:@(column.LowerColumnName)Excessive.Add(@(column.LowerColumnName)Data.FindAll(it => @(column.LowerColumnName).Contains(it.id)).Select(s => s.fullName).FirstOrDefault());
        }
                @:}
@:
                @:item.@(column.LowerColumnName)_name = string.Join(",", @(column.LowerColumnName)Excessive);
}
            @:}
break;
case "dictionary":
@if(!column.IsMultiple)
{
            @:if(item.@(column.LowerColumnName) != null)
            @:{
        @if(column.ShowAllLevels){
                @:item.@(column.LowerColumnName)_name = string.Join("@(column.Separator)", await _repository.AsSugarClient().Queryable<DictionaryDataEntity>().Where(it => item.@(column.LowerColumnName).Contains(it.@(column.Value == "id" ? "Id" : "EnCode")) && it.DictionaryTypeId.Equals("@(column.propsUrl)")).Select(it => it.FullName).ToListAsync());
        }else{
                @:item.@(column.LowerColumnName)_name = await _repository.AsSugarClient().Queryable<DictionaryDataEntity>().Where(it => item.@(column.LowerColumnName).Contains(it.@(column.Value == "id" ? "Id" : "EnCode")) && it.DictionaryTypeId.Equals("@(column.propsUrl)")).Select(it => it.FullName).FirstAsync();
        }
}else{
            @:if(item.@(column.LowerColumnName).Count > 0)
            @:{
                @:var @(column.LowerColumnName)Excessive = new List<string>();
                @:foreach (var @(column.LowerColumnName) in item.@(column.LowerColumnName))
                @:{
        @if(column.ShowAllLevels){
                    @:@(column.LowerColumnName)Excessive.Add(string.Join("@(column.Separator)", await _repository.AsSugarClient().Queryable<DictionaryDataEntity>().Where(it => @(column.LowerColumnName).Contains(it.@(column.Value == "id" ? "Id" : "EnCode")) && it.DictionaryTypeId.Equals("@(column.propsUrl)")).Select(it => it.FullName).ToListAsync()));
        }else{
                    @:@(column.LowerColumnName)Excessive.Add(await _repository.AsSugarClient().Queryable<DictionaryDataEntity>().Where(it => @(column.LowerColumnName).Contains(it.@(column.Value == "id" ? "Id" : "EnCode")) && it.DictionaryTypeId.Equals("@(column.propsUrl)")).Select(it => it.FullName).FirstAsync());
        }
                @:}
@:
                @:item.@(column.LowerColumnName)_name = string.Join(",", @(column.LowerColumnName)Excessive);
}
            @:}
break;
case "dynamic":
@if(column.IsLinkage)
{
                @:linkageParameters = new List<DataInterfaceParameter>();
@foreach(var linkage in column.LinkageConfig)
{
                @:linkageParameters.Add(new DataInterfaceParameter
                @:{
                    @:field = "@(linkage.field)",
                    @:relationField = @(linkage.sourceType==1 && linkage.relationField!="string.Empty" ? "item."+linkage.relationField : linkage.relationField),
                    @:isSubTable = @(linkage.isSubTable.ToString().ToLower()),
                    @:dataType = "@(linkage.dataType)",
                    @:defaultValue = "@(linkage.defaultValue)",
                    @:fieldName = "@(linkage.fieldName)",
                    @:sourceType = @(linkage.sourceType)
                @:});
}
}
            @:var @(column.LowerColumnName)Data = await _dataInterfaceService.GetDynamicList("@(column.LowerColumnName)", "@(column.propsUrl)", "@(column.Value)", "@(column.Label)", "@(column.Children)"@(column.IsLinkage ? ", linkageParameters" : ""));
@if(!column.IsMultiple)
{
            @:if(item.@(column.LowerColumnName) != null)
            @:{
        @if(column.ShowAllLevels){
                @:item.@(column.LowerColumnName)_name = string.Join("@(column.Separator)", @(column.LowerColumnName)Data.FindAll(it => item.@(column.LowerColumnName).Contains(it.id)).Select(it => it.fullName));
        }else{
                @:item.@(column.LowerColumnName)_name = @(column.LowerColumnName)Data.FindAll(it => item.@(column.LowerColumnName).Contains(it.id)).Select(s => s.fullName).FirstOrDefault();
        }
}else{
            @:if(item.@(column.LowerColumnName).Count > 0)
            @:{
                @:var @(column.LowerColumnName)Excessive = new List<string>();
                @:foreach (var @(column.LowerColumnName) in item.@(column.LowerColumnName))
                @:{
        @if(column.ShowAllLevels){
                    @:@(column.LowerColumnName)Excessive.Add(string.Join("@(column.Separator)", @(column.LowerColumnName)Data.FindAll(it => @(column.LowerColumnName).Contains(it.id)).Select(it => it.fullName)));
        }else{
                    @:@(column.LowerColumnName)Excessive.Add(@(column.LowerColumnName)Data.FindAll(it => @(column.LowerColumnName).Contains(it.id)).Select(it => it.fullName).FirstOrDefault());
        }
                @:}
@:
                @:item.@(column.LowerColumnName)_name = string.Join(",", @(column.LowerColumnName)Excessive);
}
            @:}
break;
}
@:
break;
case "organizeSelect":
            @:// @column.ColumnComment
            @:item.@(column.LowerColumnName)_name = _controlParsing.GetOrganizeName(@(column.IsMultiple.ToString().ToLower()),item.@(column.LowerColumnName));
@:
break;
case "currOrganize":
            @:// @column.ColumnComment
            @:item.@(column.LowerColumnName)_name = _controlParsing.GetCurrOrganizeName("@(column.ShowLevel)",item.@(column.LowerColumnName));
            @:item.@(column.LowerColumnName) = item.@(column.LowerColumnName)_name;
@:
break;
case "depSelect":
            @:// @column.ColumnComment
            @:item.@(column.LowerColumnName)_name = _controlParsing.GetDepartmentName(@(column.IsMultiple.ToString().ToLower()),item.@(column.LowerColumnName));
@:
break;
case "posSelect":
@if(column.IsMultiple)
{
            @:// @column.ColumnComment
            @:if(item.@(column.LowerColumnName).Count > 0)
            @:{
                @:item.@(column.LowerColumnName)_name = string.Join(",", await _repository.AsSugarClient().Queryable<PositionEntity>().Where(it => item.@(column.LowerColumnName).Contains(it.Id)).Select(it => it.FullName).ToListAsync());
            @:}
@:
}
break;
case "userSelect":
@if(column.IsMultiple)
{
            @:// @column.ColumnComment
            @:if(item.@(column.LowerColumnName).Count > 0)
            @:{
                @:item.@(column.LowerColumnName)_name = string.Join(",", await _repository.AsSugarClient().Queryable<UserEntity>().Where(a => item.@(column.LowerColumnName).Contains(a.Id)).Select(it => it.RealName).ToListAsync());
            @:}
@:
}
break;
case "roleSelect":
@if(column.IsMultiple)
{
            @:// @column.ColumnComment
            @:if(item.@(column.LowerColumnName).Count > 0)
            @:{
                @:item.@(column.LowerColumnName)_name = string.Join(",", await _repository.AsSugarClient().Queryable<RoleEntity>().Where(it => item.@(column.LowerColumnName).Contains(it.Id)).Select(it => it.FullName).ToListAsync());
            @:}
@:
}
break;
case "groupSelect":
@if(column.IsMultiple)
{
            @:// @column.ColumnComment
            @:if(item.@(column.LowerColumnName).Count > 0)
            @:{
                @:item.@(column.LowerColumnName)_name = string.Join(",", await _repository.AsSugarClient().Queryable<GroupEntity>().Where(it => item.@(column.LowerColumnName).Contains(it.Id)).Select(it => it.FullName).ToListAsync());
            @:}
@:
}
break;
case "treeSelect":
            @:// @column.ColumnComment
@switch(column.ControlsDataType)
{
case "static":
            @:var @(column.LowerColumnName)Data = "[@foreach(var data in column.StaticData){@("{\\\"id\\\":\\\"" + @data.id + "\\\",\\\"fullName\\\":\\\""+ @data.fullName + "\\\"}")@(dataCount == 1 ? "" : ",")dataCount--;}]".ToObject<List<StaticDataModel>>();
@if(!column.IsMultiple)
{
            @:if(item.@(column.LowerColumnName) != null)
            @:{
                @:item.@(column.LowerColumnName)_name = @(column.LowerColumnName)Data.Find(it => it.id.Equals(item.@(column.LowerColumnName)))?.fullName;
}else{
            @:if(item.@(column.LowerColumnName).Count > 0)
            @:{
                @:item.@(column.LowerColumnName)_name = string.Join(",", @(column.LowerColumnName)Data.FindAll(it => item.@(column.LowerColumnName).Contains(it.id)).Select(it => it.fullName));
}
            @:}
break;
case "dictionary":
@if(column.IsMultiple)
{
            @:if(item.@(column.LowerColumnName).Count > 0)
            @:{
                @:item.@(column.LowerColumnName)_name = string.Join(",", await _repository.AsSugarClient().Queryable<DictionaryDataEntity>().Where(it => item.@(column.LowerColumnName).Contains(it.@(column.Value == "id" ? "Id" : "EnCode")) && it.DictionaryTypeId.Equals("@(column.propsUrl)")).Select(it => it.FullName).ToListAsync());
            @:}
}
break;
case "dynamic":
@if(column.IsLinkage)
{
                @:linkageParameters = new List<DataInterfaceParameter>();
@foreach(var linkage in column.LinkageConfig)
{
                @:linkageParameters.Add(new DataInterfaceParameter
                @:{
                    @:field = "@(linkage.field)",
                    @:relationField = @(linkage.sourceType==1 && linkage.relationField!="string.Empty" ? "item."+linkage.relationField : linkage.relationField),
                    @:isSubTable = @(linkage.isSubTable.ToString().ToLower()),
                    @:dataType = "@(linkage.dataType)",
                    @:defaultValue = "@(linkage.defaultValue)",
                    @:fieldName = "@(linkage.fieldName)",
                    @:sourceType = @(linkage.sourceType)
                @:});
}
}
            @:var @(column.LowerColumnName)Data = await _dataInterfaceService.GetDynamicList("@(column.LowerColumnName)", "@(column.propsUrl)", "@(column.Value)", "@(column.Label)", "@(column.Children)"@(column.IsLinkage ? ", linkageParameters" : ""));
@if(!column.IsMultiple)
{
            @:if(item.@(column.LowerColumnName) != null)
            @:{
                @:item.@(column.LowerColumnName)_name = @(column.LowerColumnName)Data.Find(it => it.id.Equals(item.@(column.LowerColumnName)))?.fullName;
}else{
            @:if(item.@(column.LowerColumnName).Count > 0)
            @:{
                @:item.@(column.LowerColumnName)_name = string.Join(",", @(column.LowerColumnName)Data.FindAll(it => item.@(column.LowerColumnName).Contains(it.id)).Select(it => it.fullName));
}
            @:}
break;
}
@:
break;
case "areaSelect":
            @:// @column.ColumnComment
@if(!column.IsMultiple)
{
            @:if(item.@(column.LowerColumnName) != null)
            @:{
                @:item.@(column.LowerColumnName)_name = string.Join("/", await _repository.AsSugarClient().Queryable<ProvinceEntity>().Where(it => item.@(column.LowerColumnName).Contains(it.Id)).Select(it => it.FullName).ToListAsync());
}else{
            @:if(item.@(column.LowerColumnName).Count > 0)
            @:{
                @:var @(column.LowerColumnName)Excessive = new List<string>();
                @:foreach (var @(column.LowerColumnName) in item.@(column.LowerColumnName))
                @:{
                    @:@(column.LowerColumnName)Excessive.Add(string.Join("/", await _repository.AsSugarClient().Queryable<ProvinceEntity>().Where(it => @(column.LowerColumnName).Contains(it.Id)).Select(it => it.FullName).ToListAsync()));
                @:}
@:
                @:item.@(column.LowerColumnName)_name = string.Join(",", @(column.LowerColumnName)Excessive);
}
            @:}
@:
break;
case "popupTableSelect":
            @:// @column.ColumnComment
@if(column.IsLinkage)
{
            @:linkageParameters = new List<DataInterfaceParameter>();
@foreach(var linkage in column.LinkageConfig)
{
            @:linkageParameters.Add(new DataInterfaceParameter
            @:{
                    @:field = "@(linkage.field)",
                    @:relationField = @(linkage.sourceType==1 && linkage.relationField!="string.Empty" ? "item."+linkage.relationField : linkage.relationField),
                    @:isSubTable = @(linkage.isSubTable.ToString().ToLower()),
                    @:dataType = "@(linkage.dataType)",
                    @:defaultValue = "@(linkage.defaultValue)",
                    @:fieldName = "@(linkage.fieldName)",
                    @:sourceType = @(linkage.sourceType)
            @:});
}
}
            @:var @(column.LowerColumnName)Data = await _dataInterfaceService.GetDynamicList("@(column.LowerColumnName)", "@(column.propsUrl)", "@(column.Value)", "@(column.Label)", "@(column.Children)"@(column.IsLinkage ? ", linkageParameters" : ""));
@if(!column.IsMultiple)
{
            @:if(item.@(column.LowerColumnName) != null)
            @:{
                @:item.@(column.LowerColumnName)_name = @(column.LowerColumnName)Data.Find(it => it.id.Equals(item.@(column.LowerColumnName)))?.fullName;
            @:}
}else{
            @:if(item.@(column.LowerColumnName).Count > 0)
            @:{
                @:item.@(column.LowerColumnName)_name = string.Join(",", @(column.LowerColumnName)Data.FindAll(it => item.@(column.LowerColumnName).Contains(it.id)).Select(it => it.fullName));
            @:}
}
@:
break;
}
}
}
    }
@*获取新增数据方法模板*@
    void GetTheNewDataMethodTemplate(){
@if(Model.ConcurrencyLock)
{
        @:entity.Version = 0;
}
@foreach(var column in Model.TableField)
{
@switch(column.jnpfKey)
{
case "createTime":
        @:entity.@column.ColumnName = string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now).ParseToDateTime();
break;
case "createUser":
        @:entity.@column.ColumnName = _userManager.UserId;
break;
case "currPosition":
        @:entity.@column.ColumnName = _userManager.User.PositionId.IsNullOrEmpty() ? null : _userManager.User.PositionId;
break;
case "currOrganize":
        @:entity.@column.ColumnName = _repository.AsSugarClient().Queryable<OrganizeEntity>().Where(it => _userManager.User.OrganizeId.Equals(it.Id)).Select(it => it.OrganizeIdTree)?.First()?.Split(",").ToJsonString();
break;
case "billRule":
        @:entity.@column.ColumnName = string.IsNullOrEmpty(entity.@column.ColumnName) ? await _billRullService.GetBillNumber("@(column.Rule)") : entity.@column.ColumnName;
break;
}
}
@if(Model.IsUnique)
{
@foreach(var column in Model.TableField)
{
@if(column.IsUnique)
{
        @:if(await @(Model.DbLinkId != "0" ? "_sqlSugarClient.Queryable<" + Model.ClassName + "Entity>()." : "_repository.Is")AnyAsync(it => it.@(column.ColumnName).Equals(input.@(column.LowerColumnName))@(Model.EnableFlow ? " && it.FlowId==input.flowId " : " && it.FlowId==null ")@(Model.IsLogicalDelete ? "  && it.DeleteMark == null" : "")))
            @:throw Oops.Bah(ErrorCode.COM1023, "@(column.ControlLabel)");
}
}
}
        @:var isOk = await @(Model.DbLinkId != "0" ? "_sqlSugarClient." : "_repository.As")Insertable(entity).IgnoreColumns(ignoreNullColumn: true).ExecuteCommandAsync();
    }
    void GetAndModifyDataMethodTemplate()
    {
@foreach(var column in Model.TableField)
{
@switch(column.jnpfKey)
{
case "modifyTime":
        @:entity.@column.ColumnName = string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now).ParseToDateTime();
break;
case "modifyUser":
        @:entity.@column.ColumnName = _userManager.UserId;
break;
}
}
@if(Model.IsUnique)
{
@foreach(var column in Model.TableField)
{
@if(column.IsUnique)
{
        @:if (await @(Model.DbLinkId != "0" ? "_sqlSugarClient.Queryable<" + Model.ClassName + "Entity>()." : "_repository.Is")AnyAsync(it => it.@(column.ColumnName).Equals(input.@(column.LowerColumnName))@(Model.EnableFlow ? " && it.FlowId==input.flowId " : " && it.FlowId==null ")@(Model.IsLogicalDelete ? "  && it.DeleteMark == null" : "") && !it.@(Model.PrimaryKey).Equals(id)))
            @:throw Oops.Bah(ErrorCode.COM1023, "@(column.ControlLabel)");
}
}
}
        @:var isOk =0;
@if(Model.ConcurrencyLock)
{
        @:try
        @:{
}
        @:@(Model.ConcurrencyLock ? "   ":"")isOk = await @(Model.DbLinkId != "0" ? "_sqlSugarClient." : "_repository.As")Updateable(entity)
@if(Model.IsUpdate || Model.ConcurrencyLock)
{
            @:@(Model.ConcurrencyLock ? "   ":"").UpdateColumns(it => new
            @:@(Model.ConcurrencyLock ? "   ":""){
}
@foreach (var table in Model.TableField)
{
@if(table.IsUpdate)
{
                @:@(Model.ConcurrencyLock ? "   ":"")it.@(table.ColumnName),
}
}
@if(Model.ConcurrencyLock)
{
                    @:it.Version,
                @:}).ExecuteCommandWithOptLockAsync(true);
}else{
            @:@(Model.IsUpdate ? "})" : "").ExecuteCommandAsync();
}
@if(Model.ConcurrencyLock)
{
        @:}
        @:catch (Exception)
        @:{
            @:throw Oops.Bah(ErrorCode.COM1010);
        @:}
}
    }
}